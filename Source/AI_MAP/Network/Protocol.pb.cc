// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_LOGIN::C_LOGIN(
    ::_pbi::ConstantInitialized) {}
struct C_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOGINDefaultTypeInternal() {}
  union {
    C_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR S_LOGIN::S_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYERSPAWNPOINT::C_PLAYERSPAWNPOINT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spawnpointsize_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYERSPAWNPOINTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYERSPAWNPOINTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYERSPAWNPOINTDefaultTypeInternal() {}
  union {
    C_PLAYERSPAWNPOINT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYERSPAWNPOINTDefaultTypeInternal _C_PLAYERSPAWNPOINT_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYERCOUNT::S_PLAYERCOUNT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playercount_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYERCOUNTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYERCOUNTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYERCOUNTDefaultTypeInternal() {}
  union {
    S_PLAYERCOUNT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYERCOUNTDefaultTypeInternal _S_PLAYERCOUNT_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYERCOUNT::C_PLAYERCOUNT(
    ::_pbi::ConstantInitialized) {}
struct C_PLAYERCOUNTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYERCOUNTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYERCOUNTDefaultTypeInternal() {}
  union {
    C_PLAYERCOUNT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYERCOUNTDefaultTypeInternal _C_PLAYERCOUNT_default_instance_;
PROTOBUF_CONSTEXPR C_GAMESTART::C_GAMESTART(
    ::_pbi::ConstantInitialized) {}
struct C_GAMESTARTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_GAMESTARTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_GAMESTARTDefaultTypeInternal() {}
  union {
    C_GAMESTART _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_GAMESTARTDefaultTypeInternal _C_GAMESTART_default_instance_;
PROTOBUF_CONSTEXPR S_GAMESTART::S_GAMESTART(
    ::_pbi::ConstantInitialized) {}
struct S_GAMESTARTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_GAMESTARTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_GAMESTARTDefaultTypeInternal() {}
  union {
    S_GAMESTART _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_GAMESTARTDefaultTypeInternal _S_GAMESTART_default_instance_;
PROTOBUF_CONSTEXPR C_ENTER_GAME::C_ENTER_GAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ENTER_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ENTER_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ENTER_GAMEDefaultTypeInternal() {}
  union {
    C_ENTER_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_ENTER_GAME::S_ENTER_GAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.spawnidx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENTER_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENTER_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENTER_GAMEDefaultTypeInternal() {}
  union {
    S_ENTER_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
PROTOBUF_CONSTEXPR C_LEAVE_GAME::C_LEAVE_GAME(
    ::_pbi::ConstantInitialized) {}
struct C_LEAVE_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LEAVE_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LEAVE_GAMEDefaultTypeInternal() {}
  union {
    C_LEAVE_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LEAVE_GAMEDefaultTypeInternal _C_LEAVE_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_LEAVE_GAME::S_LEAVE_GAME(
    ::_pbi::ConstantInitialized) {}
struct S_LEAVE_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LEAVE_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LEAVE_GAMEDefaultTypeInternal() {}
  union {
    S_LEAVE_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LEAVE_GAMEDefaultTypeInternal _S_LEAVE_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_SPAWN::S_SPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.spawnidx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SPAWNDefaultTypeInternal() {}
  union {
    S_SPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SPAWNDefaultTypeInternal _S_SPAWN_default_instance_;
PROTOBUF_CONSTEXPR S_DESPAWN::S_DESPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_ids_)*/{}
  , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_DESPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DESPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DESPAWNDefaultTypeInternal() {}
  union {
    S_DESPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DESPAWNDefaultTypeInternal _S_DESPAWN_default_instance_;
PROTOBUF_CONSTEXPR C_MOVE::C_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MOVEDefaultTypeInternal() {}
  union {
    C_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
PROTOBUF_CONSTEXPR S_MOVE::S_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MOVEDefaultTypeInternal() {}
  union {
    S_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
PROTOBUF_CONSTEXPR C_CHAT::C_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CHATDefaultTypeInternal() {}
  union {
    C_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
PROTOBUF_CONSTEXPR S_CHAT::S_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHATDefaultTypeInternal() {}
  union {
    S_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
PROTOBUF_CONSTEXPR C_FIRE::C_FIRE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.projectile_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_FIREDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_FIREDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_FIREDefaultTypeInternal() {}
  union {
    C_FIRE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_FIREDefaultTypeInternal _C_FIRE_default_instance_;
PROTOBUF_CONSTEXPR S_FIRE::S_FIRE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.projectile_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_FIREDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FIREDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FIREDefaultTypeInternal() {}
  union {
    S_FIRE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FIREDefaultTypeInternal _S_FIRE_default_instance_;
PROTOBUF_CONSTEXPR C_HIT::C_HIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ownerid_)*/uint64_t{0u}
  , /*decltype(_impl_.targetid_)*/uint64_t{0u}
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_HITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_HITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_HITDefaultTypeInternal() {}
  union {
    C_HIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_HITDefaultTypeInternal _C_HIT_default_instance_;
PROTOBUF_CONSTEXPR S_HIT::S_HIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ownerid_)*/uint64_t{0u}
  , /*decltype(_impl_.targetid_)*/uint64_t{0u}
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_HITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_HITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_HITDefaultTypeInternal() {}
  union {
    S_HIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_HITDefaultTypeInternal _S_HIT_default_instance_;
PROTOBUF_CONSTEXPR S_EXPUP::S_EXPUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ownerid_)*/uint64_t{0u}
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_EXPUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EXPUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EXPUPDefaultTypeInternal() {}
  union {
    S_EXPUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EXPUPDefaultTypeInternal _S_EXPUP_default_instance_;
PROTOBUF_CONSTEXPR C_EXPUP::C_EXPUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ownerid_)*/uint64_t{0u}
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_EXPUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_EXPUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_EXPUPDefaultTypeInternal() {}
  union {
    C_EXPUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_EXPUPDefaultTypeInternal _C_EXPUP_default_instance_;
PROTOBUF_CONSTEXPR S_LVUP::S_LVUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ownerid_)*/uint64_t{0u}
  , /*decltype(_impl_.level_)*/int64_t{0}
  , /*decltype(_impl_.currexp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LVUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LVUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LVUPDefaultTypeInternal() {}
  union {
    S_LVUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LVUPDefaultTypeInternal _S_LVUP_default_instance_;
PROTOBUF_CONSTEXPR C_LVUP::C_LVUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ownerid_)*/uint64_t{0u}
  , /*decltype(_impl_.level_)*/int64_t{0}
  , /*decltype(_impl_.currexp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_LVUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LVUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LVUPDefaultTypeInternal() {}
  union {
    C_LVUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LVUPDefaultTypeInternal _C_LVUP_default_instance_;
PROTOBUF_CONSTEXPR C_AISPAWN_RANDOM::C_AISPAWN_RANDOM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.container_idx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AISPAWN_RANDOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AISPAWN_RANDOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AISPAWN_RANDOMDefaultTypeInternal() {}
  union {
    C_AISPAWN_RANDOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AISPAWN_RANDOMDefaultTypeInternal _C_AISPAWN_RANDOM_default_instance_;
PROTOBUF_CONSTEXPR S_AISPAWN_RANDOM::S_AISPAWN_RANDOM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.container_idx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AISPAWN_RANDOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AISPAWN_RANDOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AISPAWN_RANDOMDefaultTypeInternal() {}
  union {
    S_AISPAWN_RANDOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AISPAWN_RANDOMDefaultTypeInternal _S_AISPAWN_RANDOM_default_instance_;
PROTOBUF_CONSTEXPR C_AISPAWN_PATROL::C_AISPAWN_PATROL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.container_idx_)*/uint64_t{0u}
  , /*decltype(_impl_.pointidx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AISPAWN_PATROLDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AISPAWN_PATROLDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AISPAWN_PATROLDefaultTypeInternal() {}
  union {
    C_AISPAWN_PATROL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AISPAWN_PATROLDefaultTypeInternal _C_AISPAWN_PATROL_default_instance_;
PROTOBUF_CONSTEXPR S_AISPAWN_PATROL::S_AISPAWN_PATROL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.container_idx_)*/uint64_t{0u}
  , /*decltype(_impl_.pointidx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AISPAWN_PATROLDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AISPAWN_PATROLDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AISPAWN_PATROLDefaultTypeInternal() {}
  union {
    S_AISPAWN_PATROL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AISPAWN_PATROLDefaultTypeInternal _S_AISPAWN_PATROL_default_instance_;
PROTOBUF_CONSTEXPR C_AISPAWN_BOSS::C_AISPAWN_BOSS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.container_idx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AISPAWN_BOSSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AISPAWN_BOSSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AISPAWN_BOSSDefaultTypeInternal() {}
  union {
    C_AISPAWN_BOSS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AISPAWN_BOSSDefaultTypeInternal _C_AISPAWN_BOSS_default_instance_;
PROTOBUF_CONSTEXPR S_AISPAWN_BOSS::S_AISPAWN_BOSS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.container_idx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AISPAWN_BOSSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AISPAWN_BOSSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AISPAWN_BOSSDefaultTypeInternal() {}
  union {
    S_AISPAWN_BOSS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AISPAWN_BOSSDefaultTypeInternal _S_AISPAWN_BOSS_default_instance_;
PROTOBUF_CONSTEXPR S_AIMOVE::S_AIMOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AIMOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AIMOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AIMOVEDefaultTypeInternal() {}
  union {
    S_AIMOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AIMOVEDefaultTypeInternal _S_AIMOVE_default_instance_;
PROTOBUF_CONSTEXPR C_AIMOVE::C_AIMOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AIMOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AIMOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AIMOVEDefaultTypeInternal() {}
  union {
    C_AIMOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AIMOVEDefaultTypeInternal _C_AIMOVE_default_instance_;
PROTOBUF_CONSTEXPR S_AIMOVESTOP::S_AIMOVESTOP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AIMOVESTOPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AIMOVESTOPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AIMOVESTOPDefaultTypeInternal() {}
  union {
    S_AIMOVESTOP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AIMOVESTOPDefaultTypeInternal _S_AIMOVESTOP_default_instance_;
PROTOBUF_CONSTEXPR C_AIMOVESTOP::C_AIMOVESTOP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AIMOVESTOPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AIMOVESTOPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AIMOVESTOPDefaultTypeInternal() {}
  union {
    C_AIMOVESTOP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AIMOVESTOPDefaultTypeInternal _C_AIMOVESTOP_default_instance_;
PROTOBUF_CONSTEXPR S_AIATTACK::S_AIATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.attack_idx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AIATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AIATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AIATTACKDefaultTypeInternal() {}
  union {
    S_AIATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AIATTACKDefaultTypeInternal _S_AIATTACK_default_instance_;
PROTOBUF_CONSTEXPR C_AIATTACK::C_AIATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.attack_idx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AIATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AIATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AIATTACKDefaultTypeInternal() {}
  union {
    C_AIATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AIATTACKDefaultTypeInternal _C_AIATTACK_default_instance_;
PROTOBUF_CONSTEXPR S_AIATTACK_BOSS2::S_AIATTACK_BOSS2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_id_)*/{}
  , /*decltype(_impl_._target_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AIATTACK_BOSS2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AIATTACK_BOSS2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AIATTACK_BOSS2DefaultTypeInternal() {}
  union {
    S_AIATTACK_BOSS2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AIATTACK_BOSS2DefaultTypeInternal _S_AIATTACK_BOSS2_default_instance_;
PROTOBUF_CONSTEXPR C_AIATTACK_BOSS2::C_AIATTACK_BOSS2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_id_)*/{}
  , /*decltype(_impl_._target_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AIATTACK_BOSS2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AIATTACK_BOSS2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AIATTACK_BOSS2DefaultTypeInternal() {}
  union {
    C_AIATTACK_BOSS2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AIATTACK_BOSS2DefaultTypeInternal _C_AIATTACK_BOSS2_default_instance_;
PROTOBUF_CONSTEXPR S_AIROTATE::S_AIROTATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AIROTATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AIROTATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AIROTATEDefaultTypeInternal() {}
  union {
    S_AIROTATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AIROTATEDefaultTypeInternal _S_AIROTATE_default_instance_;
PROTOBUF_CONSTEXPR C_AIROTATE::C_AIROTATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AIROTATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AIROTATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AIROTATEDefaultTypeInternal() {}
  union {
    C_AIROTATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AIROTATEDefaultTypeInternal _C_AIROTATE_default_instance_;
PROTOBUF_CONSTEXPR S_AIHIT::S_AIHIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AIHITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AIHITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AIHITDefaultTypeInternal() {}
  union {
    S_AIHIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AIHITDefaultTypeInternal _S_AIHIT_default_instance_;
PROTOBUF_CONSTEXPR C_AIHIT::C_AIHIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AIHITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AIHITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AIHITDefaultTypeInternal() {}
  union {
    C_AIHIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AIHITDefaultTypeInternal _C_AIHIT_default_instance_;
PROTOBUF_CONSTEXPR S_DAMAGED::S_DAMAGED(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.guardpoint_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_DAMAGEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DAMAGEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DAMAGEDDefaultTypeInternal() {}
  union {
    S_DAMAGED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DAMAGEDDefaultTypeInternal _S_DAMAGED_default_instance_;
PROTOBUF_CONSTEXPR C_DAMAGED::C_DAMAGED(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.guardpoint_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_DAMAGEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DAMAGEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DAMAGEDDefaultTypeInternal() {}
  union {
    C_DAMAGED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DAMAGEDDefaultTypeInternal _C_DAMAGED_default_instance_;
PROTOBUF_CONSTEXPR S_AIDAMAGED::S_AIDAMAGED(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AIDAMAGEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AIDAMAGEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AIDAMAGEDDefaultTypeInternal() {}
  union {
    S_AIDAMAGED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AIDAMAGEDDefaultTypeInternal _S_AIDAMAGED_default_instance_;
PROTOBUF_CONSTEXPR C_AIDAMAGED::C_AIDAMAGED(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AIDAMAGEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AIDAMAGEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AIDAMAGEDDefaultTypeInternal() {}
  union {
    C_AIDAMAGED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AIDAMAGEDDefaultTypeInternal _C_AIDAMAGED_default_instance_;
PROTOBUF_CONSTEXPR S_AIDEAD::S_AIDEAD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.owner_object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.dead_)*/false
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AIDEADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AIDEADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AIDEADDefaultTypeInternal() {}
  union {
    S_AIDEAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AIDEADDefaultTypeInternal _S_AIDEAD_default_instance_;
PROTOBUF_CONSTEXPR C_AIDEAD::C_AIDEAD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.owner_object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.dead_)*/false
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AIDEADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AIDEADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AIDEADDefaultTypeInternal() {}
  union {
    C_AIDEAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AIDEADDefaultTypeInternal _C_AIDEAD_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYERDEAD::S_PLAYERDEAD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.dead_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYERDEADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYERDEADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYERDEADDefaultTypeInternal() {}
  union {
    S_PLAYERDEAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYERDEADDefaultTypeInternal _S_PLAYERDEAD_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYERDEAD::C_PLAYERDEAD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.dead_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYERDEADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYERDEADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYERDEADDefaultTypeInternal() {}
  union {
    C_PLAYERDEAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYERDEADDefaultTypeInternal _C_PLAYERDEAD_default_instance_;
PROTOBUF_CONSTEXPR S_AIPROJSPAWN::S_AIPROJSPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.projidx_)*/int64_t{0}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.attackdmg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AIPROJSPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AIPROJSPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AIPROJSPAWNDefaultTypeInternal() {}
  union {
    S_AIPROJSPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AIPROJSPAWNDefaultTypeInternal _S_AIPROJSPAWN_default_instance_;
PROTOBUF_CONSTEXPR C_AIPROJSPAWN::C_AIPROJSPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.projidx_)*/int64_t{0}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.attackdmg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AIPROJSPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AIPROJSPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AIPROJSPAWNDefaultTypeInternal() {}
  union {
    C_AIPROJSPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AIPROJSPAWNDefaultTypeInternal _C_AIPROJSPAWN_default_instance_;
PROTOBUF_CONSTEXPR S_AI_KNOCKS_BACK::S_AI_KNOCKS_BACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.target_id_)*/uint64_t{0u}
  , /*decltype(_impl_.vx_)*/0
  , /*decltype(_impl_.vy_)*/0
  , /*decltype(_impl_.vz_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_AI_KNOCKS_BACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_AI_KNOCKS_BACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_AI_KNOCKS_BACKDefaultTypeInternal() {}
  union {
    S_AI_KNOCKS_BACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_AI_KNOCKS_BACKDefaultTypeInternal _S_AI_KNOCKS_BACK_default_instance_;
PROTOBUF_CONSTEXPR C_AI_KNOCKS_BACK::C_AI_KNOCKS_BACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.target_id_)*/uint64_t{0u}
  , /*decltype(_impl_.vx_)*/0
  , /*decltype(_impl_.vy_)*/0
  , /*decltype(_impl_.vz_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_AI_KNOCKS_BACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_AI_KNOCKS_BACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_AI_KNOCKS_BACKDefaultTypeInternal() {}
  union {
    C_AI_KNOCKS_BACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_AI_KNOCKS_BACKDefaultTypeInternal _C_AI_KNOCKS_BACK_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYERSKILL_BOMB::S_PLAYERSKILL_BOMB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.abilityarrayidx_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.dmg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYERSKILL_BOMBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYERSKILL_BOMBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYERSKILL_BOMBDefaultTypeInternal() {}
  union {
    S_PLAYERSKILL_BOMB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYERSKILL_BOMBDefaultTypeInternal _S_PLAYERSKILL_BOMB_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYERSKILL_BOMB::C_PLAYERSKILL_BOMB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.abilityarrayidx_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.dmg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYERSKILL_BOMBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYERSKILL_BOMBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYERSKILL_BOMBDefaultTypeInternal() {}
  union {
    C_PLAYERSKILL_BOMB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYERSKILL_BOMBDefaultTypeInternal _C_PLAYERSKILL_BOMB_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYERSKILL_GRANADE::S_PLAYERSKILL_GRANADE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.abilityarrayidx_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.rx_)*/0
  , /*decltype(_impl_.ry_)*/0
  , /*decltype(_impl_.rz_)*/0
  , /*decltype(_impl_.dmg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYERSKILL_GRANADEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYERSKILL_GRANADEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYERSKILL_GRANADEDefaultTypeInternal() {}
  union {
    S_PLAYERSKILL_GRANADE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYERSKILL_GRANADEDefaultTypeInternal _S_PLAYERSKILL_GRANADE_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYERSKILL_GRANADE::C_PLAYERSKILL_GRANADE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.abilityarrayidx_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.rx_)*/0
  , /*decltype(_impl_.ry_)*/0
  , /*decltype(_impl_.rz_)*/0
  , /*decltype(_impl_.dmg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYERSKILL_GRANADEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYERSKILL_GRANADEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYERSKILL_GRANADEDefaultTypeInternal() {}
  union {
    C_PLAYERSKILL_GRANADE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYERSKILL_GRANADEDefaultTypeInternal _C_PLAYERSKILL_GRANADE_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYERSKILL_CHEMICAL::S_PLAYERSKILL_CHEMICAL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.abilityarrayidx_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.dmg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYERSKILL_CHEMICALDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYERSKILL_CHEMICALDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYERSKILL_CHEMICALDefaultTypeInternal() {}
  union {
    S_PLAYERSKILL_CHEMICAL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYERSKILL_CHEMICALDefaultTypeInternal _S_PLAYERSKILL_CHEMICAL_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYERSKILL_CHEMICAL::C_PLAYERSKILL_CHEMICAL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.abilityarrayidx_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.dmg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYERSKILL_CHEMICALDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYERSKILL_CHEMICALDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYERSKILL_CHEMICALDefaultTypeInternal() {}
  union {
    C_PLAYERSKILL_CHEMICAL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYERSKILL_CHEMICALDefaultTypeInternal _C_PLAYERSKILL_CHEMICAL_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYERSKILL_GUARD::S_PLAYERSKILL_GUARD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.guardpoint_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYERSKILL_GUARDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYERSKILL_GUARDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYERSKILL_GUARDDefaultTypeInternal() {}
  union {
    S_PLAYERSKILL_GUARD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYERSKILL_GUARDDefaultTypeInternal _S_PLAYERSKILL_GUARD_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYERSKILL_GUARD::C_PLAYERSKILL_GUARD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.guardpoint_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYERSKILL_GUARDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYERSKILL_GUARDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYERSKILL_GUARDDefaultTypeInternal() {}
  union {
    C_PLAYERSKILL_GUARD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYERSKILL_GUARDDefaultTypeInternal _C_PLAYERSKILL_GUARD_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYERSKILL_HEAL::S_PLAYERSKILL_HEAL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.abilityarrayidx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYERSKILL_HEALDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYERSKILL_HEALDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYERSKILL_HEALDefaultTypeInternal() {}
  union {
    S_PLAYERSKILL_HEAL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYERSKILL_HEALDefaultTypeInternal _S_PLAYERSKILL_HEAL_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYERSKILL_HEAL::C_PLAYERSKILL_HEAL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.abilityarrayidx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYERSKILL_HEALDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYERSKILL_HEALDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYERSKILL_HEALDefaultTypeInternal() {}
  union {
    C_PLAYERSKILL_HEAL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYERSKILL_HEALDefaultTypeInternal _C_PLAYERSKILL_HEAL_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYERHEAL::S_PLAYERHEAL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.updeatedhp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYERHEALDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYERHEALDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYERHEALDefaultTypeInternal() {}
  union {
    S_PLAYERHEAL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYERHEALDefaultTypeInternal _S_PLAYERHEAL_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYERHEAL::C_PLAYERHEAL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.updeatedhp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYERHEALDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYERHEALDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYERHEALDefaultTypeInternal() {}
  union {
    C_PLAYERHEAL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYERHEALDefaultTypeInternal _C_PLAYERHEAL_default_instance_;
PROTOBUF_CONSTEXPR S_MAKEDRONE::S_MAKEDRONE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.abilityarrayidx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MAKEDRONEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MAKEDRONEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MAKEDRONEDefaultTypeInternal() {}
  union {
    S_MAKEDRONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MAKEDRONEDefaultTypeInternal _S_MAKEDRONE_default_instance_;
PROTOBUF_CONSTEXPR C_MAKEDRONE::C_MAKEDRONE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.abilityarrayidx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MAKEDRONEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MAKEDRONEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MAKEDRONEDefaultTypeInternal() {}
  union {
    C_MAKEDRONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MAKEDRONEDefaultTypeInternal _C_MAKEDRONE_default_instance_;
PROTOBUF_CONSTEXPR S_MOVEDRONE::S_MOVEDRONE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MOVEDRONEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MOVEDRONEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MOVEDRONEDefaultTypeInternal() {}
  union {
    S_MOVEDRONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MOVEDRONEDefaultTypeInternal _S_MOVEDRONE_default_instance_;
PROTOBUF_CONSTEXPR C_MOVEDRONE::C_MOVEDRONE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MOVEDRONEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MOVEDRONEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MOVEDRONEDefaultTypeInternal() {}
  union {
    C_MOVEDRONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MOVEDRONEDefaultTypeInternal _C_MOVEDRONE_default_instance_;
PROTOBUF_CONSTEXPR S_SEARCHDRONE::S_SEARCHDRONE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SEARCHDRONEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SEARCHDRONEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SEARCHDRONEDefaultTypeInternal() {}
  union {
    S_SEARCHDRONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SEARCHDRONEDefaultTypeInternal _S_SEARCHDRONE_default_instance_;
PROTOBUF_CONSTEXPR C_SEARCHDRONE::C_SEARCHDRONE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SEARCHDRONEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SEARCHDRONEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SEARCHDRONEDefaultTypeInternal() {}
  union {
    C_SEARCHDRONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SEARCHDRONEDefaultTypeInternal _C_SEARCHDRONE_default_instance_;
PROTOBUF_CONSTEXPR S_RETURNDRONE::S_RETURNDRONE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_RETURNDRONEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_RETURNDRONEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_RETURNDRONEDefaultTypeInternal() {}
  union {
    S_RETURNDRONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_RETURNDRONEDefaultTypeInternal _S_RETURNDRONE_default_instance_;
PROTOBUF_CONSTEXPR C_RETURNDRONE::C_RETURNDRONE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_RETURNDRONEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_RETURNDRONEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_RETURNDRONEDefaultTypeInternal() {}
  union {
    C_RETURNDRONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_RETURNDRONEDefaultTypeInternal _C_RETURNDRONE_default_instance_;
PROTOBUF_CONSTEXPR S_ATTACKDRONE::S_ATTACKDRONE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ATTACKDRONEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ATTACKDRONEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ATTACKDRONEDefaultTypeInternal() {}
  union {
    S_ATTACKDRONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ATTACKDRONEDefaultTypeInternal _S_ATTACKDRONE_default_instance_;
PROTOBUF_CONSTEXPR C_ATTACKDRONE::C_ATTACKDRONE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ATTACKDRONEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ATTACKDRONEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ATTACKDRONEDefaultTypeInternal() {}
  union {
    C_ATTACKDRONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ATTACKDRONEDefaultTypeInternal _C_ATTACKDRONE_default_instance_;
PROTOBUF_CONSTEXPR S_EATITEM_MAXHPUP::S_EATITEM_MAXHPUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.maxhp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_EATITEM_MAXHPUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EATITEM_MAXHPUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EATITEM_MAXHPUPDefaultTypeInternal() {}
  union {
    S_EATITEM_MAXHPUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EATITEM_MAXHPUPDefaultTypeInternal _S_EATITEM_MAXHPUP_default_instance_;
PROTOBUF_CONSTEXPR C_EATITEM_MAXHPUP::C_EATITEM_MAXHPUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.maxhp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_EATITEM_MAXHPUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_EATITEM_MAXHPUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_EATITEM_MAXHPUPDefaultTypeInternal() {}
  union {
    C_EATITEM_MAXHPUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_EATITEM_MAXHPUPDefaultTypeInternal _C_EATITEM_MAXHPUP_default_instance_;
PROTOBUF_CONSTEXPR S_EATITEM_LVUP::S_EATITEM_LVUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.curlv_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_EATITEM_LVUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EATITEM_LVUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EATITEM_LVUPDefaultTypeInternal() {}
  union {
    S_EATITEM_LVUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EATITEM_LVUPDefaultTypeInternal _S_EATITEM_LVUP_default_instance_;
PROTOBUF_CONSTEXPR C_EATITEM_LVUP::C_EATITEM_LVUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.curlv_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_EATITEM_LVUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_EATITEM_LVUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_EATITEM_LVUPDefaultTypeInternal() {}
  union {
    C_EATITEM_LVUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_EATITEM_LVUPDefaultTypeInternal _C_EATITEM_LVUP_default_instance_;
PROTOBUF_CONSTEXPR S_EATITEM_DMGUP::S_EATITEM_DMGUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.attackdmg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_EATITEM_DMGUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EATITEM_DMGUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EATITEM_DMGUPDefaultTypeInternal() {}
  union {
    S_EATITEM_DMGUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EATITEM_DMGUPDefaultTypeInternal _S_EATITEM_DMGUP_default_instance_;
PROTOBUF_CONSTEXPR C_EATITEM_DMGUP::C_EATITEM_DMGUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.attackdmg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_EATITEM_DMGUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_EATITEM_DMGUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_EATITEM_DMGUPDefaultTypeInternal() {}
  union {
    C_EATITEM_DMGUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_EATITEM_DMGUPDefaultTypeInternal _C_EATITEM_DMGUP_default_instance_;
PROTOBUF_CONSTEXPR S_EATITEM_HEALHP::S_EATITEM_HEALHP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.curhp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_EATITEM_HEALHPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EATITEM_HEALHPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EATITEM_HEALHPDefaultTypeInternal() {}
  union {
    S_EATITEM_HEALHP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EATITEM_HEALHPDefaultTypeInternal _S_EATITEM_HEALHP_default_instance_;
PROTOBUF_CONSTEXPR C_EATITEM_HEALHP::C_EATITEM_HEALHP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.curhp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_EATITEM_HEALHPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_EATITEM_HEALHPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_EATITEM_HEALHPDefaultTypeInternal() {}
  union {
    C_EATITEM_HEALHP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_EATITEM_HEALHPDefaultTypeInternal _C_EATITEM_HEALHP_default_instance_;
PROTOBUF_CONSTEXPR S_SET_MAGNETICFIELD::S_SET_MAGNETICFIELD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.r_)*/0
  , /*decltype(_impl_.g_)*/0
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SET_MAGNETICFIELDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SET_MAGNETICFIELDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SET_MAGNETICFIELDDefaultTypeInternal() {}
  union {
    S_SET_MAGNETICFIELD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SET_MAGNETICFIELDDefaultTypeInternal _S_SET_MAGNETICFIELD_default_instance_;
PROTOBUF_CONSTEXPR C_SET_MAGNETICFIELD::C_SET_MAGNETICFIELD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.r_)*/0
  , /*decltype(_impl_.g_)*/0
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SET_MAGNETICFIELDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SET_MAGNETICFIELDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SET_MAGNETICFIELDDefaultTypeInternal() {}
  union {
    C_SET_MAGNETICFIELD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SET_MAGNETICFIELDDefaultTypeInternal _C_SET_MAGNETICFIELD_default_instance_;
PROTOBUF_CONSTEXPR S_WORLD_LVUP::S_WORLD_LVUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.worldlevel_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_WORLD_LVUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_WORLD_LVUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_WORLD_LVUPDefaultTypeInternal() {}
  union {
    S_WORLD_LVUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_WORLD_LVUPDefaultTypeInternal _S_WORLD_LVUP_default_instance_;
PROTOBUF_CONSTEXPR C_WORLD_LVUP::C_WORLD_LVUP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.worldlevel_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_WORLD_LVUPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_WORLD_LVUPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_WORLD_LVUPDefaultTypeInternal() {}
  union {
    C_WORLD_LVUP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_WORLD_LVUPDefaultTypeInternal _C_WORLD_LVUP_default_instance_;
PROTOBUF_CONSTEXPR S_GAMERESULT::S_GAMERESULT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_GAMERESULTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_GAMERESULTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_GAMERESULTDefaultTypeInternal() {}
  union {
    S_GAMERESULT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_GAMERESULTDefaultTypeInternal _S_GAMERESULT_default_instance_;
PROTOBUF_CONSTEXPR C_GAMERESULT::C_GAMERESULT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_GAMERESULTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_GAMERESULTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_GAMERESULTDefaultTypeInternal() {}
  union {
    C_GAMERESULT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_GAMERESULTDefaultTypeInternal _C_GAMERESULT_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[91];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSPAWNPOINT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSPAWNPOINT, _impl_.spawnpointsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERCOUNT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERCOUNT, _impl_.playercount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERCOUNT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GAMESTART, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GAMESTART, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _impl_.client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.spawnidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LEAVE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _impl_.spawnidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, _impl_.object_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_FIRE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_FIRE, _impl_.projectile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FIRE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FIRE, _impl_.projectile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_HIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_HIT, _impl_.ownerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_HIT, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_HIT, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_HIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_HIT, _impl_.ownerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_HIT, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_HIT, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EXPUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EXPUP, _impl_.ownerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EXPUP, _impl_.exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EXPUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EXPUP, _impl_.ownerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EXPUP, _impl_.exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LVUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LVUP, _impl_.ownerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LVUP, _impl_.currexp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LVUP, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LVUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LVUP, _impl_.ownerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LVUP, _impl_.currexp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LVUP, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AISPAWN_RANDOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AISPAWN_RANDOM, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AISPAWN_RANDOM, _impl_.container_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AISPAWN_RANDOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AISPAWN_RANDOM, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AISPAWN_RANDOM, _impl_.container_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AISPAWN_PATROL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AISPAWN_PATROL, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AISPAWN_PATROL, _impl_.container_idx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AISPAWN_PATROL, _impl_.pointidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AISPAWN_PATROL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AISPAWN_PATROL, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AISPAWN_PATROL, _impl_.container_idx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AISPAWN_PATROL, _impl_.pointidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AISPAWN_BOSS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AISPAWN_BOSS, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AISPAWN_BOSS, _impl_.container_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AISPAWN_BOSS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AISPAWN_BOSS, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AISPAWN_BOSS, _impl_.container_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIMOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIMOVE, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIMOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIMOVE, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIMOVESTOP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIMOVESTOP, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIMOVESTOP, _impl_.speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIMOVESTOP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIMOVESTOP, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIMOVESTOP, _impl_.speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIATTACK, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIATTACK, _impl_.attack_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIATTACK, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIATTACK, _impl_.attack_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIATTACK_BOSS2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIATTACK_BOSS2, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIATTACK_BOSS2, _impl_.target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIATTACK_BOSS2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIATTACK_BOSS2, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIATTACK_BOSS2, _impl_.target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIROTATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIROTATE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIROTATE, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIROTATE, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIROTATE, _impl_.roll_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIROTATE, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIROTATE, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIROTATE, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIROTATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIROTATE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIROTATE, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIROTATE, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIROTATE, _impl_.roll_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIROTATE, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIROTATE, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIROTATE, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIHIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIHIT, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIHIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIHIT, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DAMAGED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DAMAGED, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DAMAGED, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DAMAGED, _impl_.guardpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DAMAGED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DAMAGED, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DAMAGED, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DAMAGED, _impl_.guardpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIDAMAGED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIDAMAGED, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIDAMAGED, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIDAMAGED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIDAMAGED, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIDAMAGED, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIDEAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIDEAD, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIDEAD, _impl_.dead_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIDEAD, _impl_.owner_object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIDEAD, _impl_.exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIDEAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIDEAD, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIDEAD, _impl_.dead_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIDEAD, _impl_.owner_object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIDEAD, _impl_.exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERDEAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERDEAD, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERDEAD, _impl_.dead_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERDEAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERDEAD, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERDEAD, _impl_.dead_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIPROJSPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIPROJSPAWN, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIPROJSPAWN, _impl_.projidx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIPROJSPAWN, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIPROJSPAWN, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIPROJSPAWN, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIPROJSPAWN, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIPROJSPAWN, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIPROJSPAWN, _impl_.roll_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIPROJSPAWN, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AIPROJSPAWN, _impl_.attackdmg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIPROJSPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIPROJSPAWN, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIPROJSPAWN, _impl_.projidx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIPROJSPAWN, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIPROJSPAWN, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIPROJSPAWN, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIPROJSPAWN, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIPROJSPAWN, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIPROJSPAWN, _impl_.roll_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIPROJSPAWN, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AIPROJSPAWN, _impl_.attackdmg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AI_KNOCKS_BACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AI_KNOCKS_BACK, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AI_KNOCKS_BACK, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AI_KNOCKS_BACK, _impl_.vx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AI_KNOCKS_BACK, _impl_.vy_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_AI_KNOCKS_BACK, _impl_.vz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AI_KNOCKS_BACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AI_KNOCKS_BACK, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AI_KNOCKS_BACK, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AI_KNOCKS_BACK, _impl_.vx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AI_KNOCKS_BACK, _impl_.vy_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_AI_KNOCKS_BACK, _impl_.vz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_BOMB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_BOMB, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_BOMB, _impl_.abilityarrayidx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_BOMB, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_BOMB, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_BOMB, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_BOMB, _impl_.dmg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_BOMB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_BOMB, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_BOMB, _impl_.abilityarrayidx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_BOMB, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_BOMB, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_BOMB, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_BOMB, _impl_.dmg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GRANADE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GRANADE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GRANADE, _impl_.abilityarrayidx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GRANADE, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GRANADE, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GRANADE, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GRANADE, _impl_.rx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GRANADE, _impl_.ry_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GRANADE, _impl_.rz_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GRANADE, _impl_.dmg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GRANADE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GRANADE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GRANADE, _impl_.abilityarrayidx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GRANADE, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GRANADE, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GRANADE, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GRANADE, _impl_.rx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GRANADE, _impl_.ry_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GRANADE, _impl_.rz_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GRANADE, _impl_.dmg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_CHEMICAL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_CHEMICAL, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_CHEMICAL, _impl_.abilityarrayidx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_CHEMICAL, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_CHEMICAL, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_CHEMICAL, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_CHEMICAL, _impl_.dmg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_CHEMICAL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_CHEMICAL, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_CHEMICAL, _impl_.abilityarrayidx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_CHEMICAL, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_CHEMICAL, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_CHEMICAL, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_CHEMICAL, _impl_.dmg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GUARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GUARD, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_GUARD, _impl_.guardpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GUARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GUARD, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_GUARD, _impl_.guardpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_HEAL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_HEAL, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERSKILL_HEAL, _impl_.abilityarrayidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_HEAL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_HEAL, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERSKILL_HEAL, _impl_.abilityarrayidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERHEAL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERHEAL, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERHEAL, _impl_.updeatedhp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERHEAL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERHEAL, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYERHEAL, _impl_.updeatedhp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAKEDRONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAKEDRONE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAKEDRONE, _impl_.abilityarrayidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAKEDRONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAKEDRONE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAKEDRONE, _impl_.abilityarrayidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVEDRONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVEDRONE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVEDRONE, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVEDRONE, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVEDRONE, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVEDRONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVEDRONE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVEDRONE, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVEDRONE, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVEDRONE, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SEARCHDRONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SEARCHDRONE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SEARCHDRONE, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SEARCHDRONE, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SEARCHDRONE, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SEARCHDRONE, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SEARCHDRONE, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SEARCHDRONE, _impl_.roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SEARCHDRONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SEARCHDRONE, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SEARCHDRONE, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SEARCHDRONE, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SEARCHDRONE, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SEARCHDRONE, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SEARCHDRONE, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SEARCHDRONE, _impl_.roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_RETURNDRONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_RETURNDRONE, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_RETURNDRONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_RETURNDRONE, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKDRONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKDRONE, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACKDRONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACKDRONE, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_MAXHPUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_MAXHPUP, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_MAXHPUP, _impl_.maxhp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_MAXHPUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_MAXHPUP, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_MAXHPUP, _impl_.maxhp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_LVUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_LVUP, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_LVUP, _impl_.curlv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_LVUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_LVUP, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_LVUP, _impl_.curlv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_DMGUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_DMGUP, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_DMGUP, _impl_.attackdmg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_DMGUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_DMGUP, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_DMGUP, _impl_.attackdmg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_HEALHP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_HEALHP, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EATITEM_HEALHP, _impl_.curhp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_HEALHP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_HEALHP, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EATITEM_HEALHP, _impl_.curhp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_MAGNETICFIELD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_MAGNETICFIELD, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_MAGNETICFIELD, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_MAGNETICFIELD, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_MAGNETICFIELD, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_MAGNETICFIELD, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_MAGNETICFIELD, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_MAGNETICFIELD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_MAGNETICFIELD, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_MAGNETICFIELD, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_MAGNETICFIELD, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_MAGNETICFIELD, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_MAGNETICFIELD, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_MAGNETICFIELD, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WORLD_LVUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WORLD_LVUP, _impl_.worldlevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WORLD_LVUP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_WORLD_LVUP, _impl_.worldlevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GAMERESULT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GAMERESULT, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GAMERESULT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GAMERESULT, _impl_.object_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_LOGIN)},
  { 6, -1, -1, sizeof(::Protocol::S_LOGIN)},
  { 13, -1, -1, sizeof(::Protocol::C_PLAYERSPAWNPOINT)},
  { 20, -1, -1, sizeof(::Protocol::S_PLAYERCOUNT)},
  { 27, -1, -1, sizeof(::Protocol::C_PLAYERCOUNT)},
  { 33, -1, -1, sizeof(::Protocol::C_GAMESTART)},
  { 39, -1, -1, sizeof(::Protocol::S_GAMESTART)},
  { 45, -1, -1, sizeof(::Protocol::C_ENTER_GAME)},
  { 52, -1, -1, sizeof(::Protocol::S_ENTER_GAME)},
  { 60, -1, -1, sizeof(::Protocol::C_LEAVE_GAME)},
  { 66, -1, -1, sizeof(::Protocol::S_LEAVE_GAME)},
  { 72, -1, -1, sizeof(::Protocol::S_SPAWN)},
  { 80, -1, -1, sizeof(::Protocol::S_DESPAWN)},
  { 87, -1, -1, sizeof(::Protocol::C_MOVE)},
  { 94, -1, -1, sizeof(::Protocol::S_MOVE)},
  { 101, -1, -1, sizeof(::Protocol::C_CHAT)},
  { 108, -1, -1, sizeof(::Protocol::S_CHAT)},
  { 116, -1, -1, sizeof(::Protocol::C_FIRE)},
  { 123, -1, -1, sizeof(::Protocol::S_FIRE)},
  { 130, -1, -1, sizeof(::Protocol::C_HIT)},
  { 139, -1, -1, sizeof(::Protocol::S_HIT)},
  { 148, -1, -1, sizeof(::Protocol::S_EXPUP)},
  { 156, -1, -1, sizeof(::Protocol::C_EXPUP)},
  { 164, -1, -1, sizeof(::Protocol::S_LVUP)},
  { 173, -1, -1, sizeof(::Protocol::C_LVUP)},
  { 182, -1, -1, sizeof(::Protocol::C_AISPAWN_RANDOM)},
  { 190, -1, -1, sizeof(::Protocol::S_AISPAWN_RANDOM)},
  { 198, -1, -1, sizeof(::Protocol::C_AISPAWN_PATROL)},
  { 207, -1, -1, sizeof(::Protocol::S_AISPAWN_PATROL)},
  { 216, -1, -1, sizeof(::Protocol::C_AISPAWN_BOSS)},
  { 224, -1, -1, sizeof(::Protocol::S_AISPAWN_BOSS)},
  { 232, -1, -1, sizeof(::Protocol::S_AIMOVE)},
  { 239, -1, -1, sizeof(::Protocol::C_AIMOVE)},
  { 246, -1, -1, sizeof(::Protocol::S_AIMOVESTOP)},
  { 254, -1, -1, sizeof(::Protocol::C_AIMOVESTOP)},
  { 262, -1, -1, sizeof(::Protocol::S_AIATTACK)},
  { 270, -1, -1, sizeof(::Protocol::C_AIATTACK)},
  { 278, -1, -1, sizeof(::Protocol::S_AIATTACK_BOSS2)},
  { 286, -1, -1, sizeof(::Protocol::C_AIATTACK_BOSS2)},
  { 294, -1, -1, sizeof(::Protocol::S_AIROTATE)},
  { 307, -1, -1, sizeof(::Protocol::C_AIROTATE)},
  { 320, -1, -1, sizeof(::Protocol::S_AIHIT)},
  { 327, -1, -1, sizeof(::Protocol::C_AIHIT)},
  { 334, -1, -1, sizeof(::Protocol::S_DAMAGED)},
  { 343, -1, -1, sizeof(::Protocol::C_DAMAGED)},
  { 352, -1, -1, sizeof(::Protocol::S_AIDAMAGED)},
  { 360, -1, -1, sizeof(::Protocol::C_AIDAMAGED)},
  { 368, -1, -1, sizeof(::Protocol::S_AIDEAD)},
  { 378, -1, -1, sizeof(::Protocol::C_AIDEAD)},
  { 388, -1, -1, sizeof(::Protocol::S_PLAYERDEAD)},
  { 396, -1, -1, sizeof(::Protocol::C_PLAYERDEAD)},
  { 404, -1, -1, sizeof(::Protocol::S_AIPROJSPAWN)},
  { 420, -1, -1, sizeof(::Protocol::C_AIPROJSPAWN)},
  { 436, -1, -1, sizeof(::Protocol::S_AI_KNOCKS_BACK)},
  { 447, -1, -1, sizeof(::Protocol::C_AI_KNOCKS_BACK)},
  { 458, -1, -1, sizeof(::Protocol::S_PLAYERSKILL_BOMB)},
  { 470, -1, -1, sizeof(::Protocol::C_PLAYERSKILL_BOMB)},
  { 482, -1, -1, sizeof(::Protocol::S_PLAYERSKILL_GRANADE)},
  { 497, -1, -1, sizeof(::Protocol::C_PLAYERSKILL_GRANADE)},
  { 512, -1, -1, sizeof(::Protocol::S_PLAYERSKILL_CHEMICAL)},
  { 524, -1, -1, sizeof(::Protocol::C_PLAYERSKILL_CHEMICAL)},
  { 536, -1, -1, sizeof(::Protocol::S_PLAYERSKILL_GUARD)},
  { 544, -1, -1, sizeof(::Protocol::C_PLAYERSKILL_GUARD)},
  { 552, -1, -1, sizeof(::Protocol::S_PLAYERSKILL_HEAL)},
  { 560, -1, -1, sizeof(::Protocol::C_PLAYERSKILL_HEAL)},
  { 568, -1, -1, sizeof(::Protocol::S_PLAYERHEAL)},
  { 576, -1, -1, sizeof(::Protocol::C_PLAYERHEAL)},
  { 584, -1, -1, sizeof(::Protocol::S_MAKEDRONE)},
  { 592, -1, -1, sizeof(::Protocol::C_MAKEDRONE)},
  { 600, -1, -1, sizeof(::Protocol::S_MOVEDRONE)},
  { 610, -1, -1, sizeof(::Protocol::C_MOVEDRONE)},
  { 620, -1, -1, sizeof(::Protocol::S_SEARCHDRONE)},
  { 633, -1, -1, sizeof(::Protocol::C_SEARCHDRONE)},
  { 646, -1, -1, sizeof(::Protocol::S_RETURNDRONE)},
  { 653, -1, -1, sizeof(::Protocol::C_RETURNDRONE)},
  { 660, -1, -1, sizeof(::Protocol::S_ATTACKDRONE)},
  { 667, -1, -1, sizeof(::Protocol::C_ATTACKDRONE)},
  { 674, -1, -1, sizeof(::Protocol::S_EATITEM_MAXHPUP)},
  { 682, -1, -1, sizeof(::Protocol::C_EATITEM_MAXHPUP)},
  { 690, -1, -1, sizeof(::Protocol::S_EATITEM_LVUP)},
  { 698, -1, -1, sizeof(::Protocol::C_EATITEM_LVUP)},
  { 706, -1, -1, sizeof(::Protocol::S_EATITEM_DMGUP)},
  { 714, -1, -1, sizeof(::Protocol::C_EATITEM_DMGUP)},
  { 722, -1, -1, sizeof(::Protocol::S_EATITEM_HEALHP)},
  { 730, -1, -1, sizeof(::Protocol::C_EATITEM_HEALHP)},
  { 738, -1, -1, sizeof(::Protocol::S_SET_MAGNETICFIELD)},
  { 750, -1, -1, sizeof(::Protocol::C_SET_MAGNETICFIELD)},
  { 762, -1, -1, sizeof(::Protocol::S_WORLD_LVUP)},
  { 769, -1, -1, sizeof(::Protocol::C_WORLD_LVUP)},
  { 776, -1, -1, sizeof(::Protocol::S_GAMERESULT)},
  { 783, -1, -1, sizeof(::Protocol::C_GAMERESULT)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_LOGIN_default_instance_._instance,
  &::Protocol::_S_LOGIN_default_instance_._instance,
  &::Protocol::_C_PLAYERSPAWNPOINT_default_instance_._instance,
  &::Protocol::_S_PLAYERCOUNT_default_instance_._instance,
  &::Protocol::_C_PLAYERCOUNT_default_instance_._instance,
  &::Protocol::_C_GAMESTART_default_instance_._instance,
  &::Protocol::_S_GAMESTART_default_instance_._instance,
  &::Protocol::_C_ENTER_GAME_default_instance_._instance,
  &::Protocol::_S_ENTER_GAME_default_instance_._instance,
  &::Protocol::_C_LEAVE_GAME_default_instance_._instance,
  &::Protocol::_S_LEAVE_GAME_default_instance_._instance,
  &::Protocol::_S_SPAWN_default_instance_._instance,
  &::Protocol::_S_DESPAWN_default_instance_._instance,
  &::Protocol::_C_MOVE_default_instance_._instance,
  &::Protocol::_S_MOVE_default_instance_._instance,
  &::Protocol::_C_CHAT_default_instance_._instance,
  &::Protocol::_S_CHAT_default_instance_._instance,
  &::Protocol::_C_FIRE_default_instance_._instance,
  &::Protocol::_S_FIRE_default_instance_._instance,
  &::Protocol::_C_HIT_default_instance_._instance,
  &::Protocol::_S_HIT_default_instance_._instance,
  &::Protocol::_S_EXPUP_default_instance_._instance,
  &::Protocol::_C_EXPUP_default_instance_._instance,
  &::Protocol::_S_LVUP_default_instance_._instance,
  &::Protocol::_C_LVUP_default_instance_._instance,
  &::Protocol::_C_AISPAWN_RANDOM_default_instance_._instance,
  &::Protocol::_S_AISPAWN_RANDOM_default_instance_._instance,
  &::Protocol::_C_AISPAWN_PATROL_default_instance_._instance,
  &::Protocol::_S_AISPAWN_PATROL_default_instance_._instance,
  &::Protocol::_C_AISPAWN_BOSS_default_instance_._instance,
  &::Protocol::_S_AISPAWN_BOSS_default_instance_._instance,
  &::Protocol::_S_AIMOVE_default_instance_._instance,
  &::Protocol::_C_AIMOVE_default_instance_._instance,
  &::Protocol::_S_AIMOVESTOP_default_instance_._instance,
  &::Protocol::_C_AIMOVESTOP_default_instance_._instance,
  &::Protocol::_S_AIATTACK_default_instance_._instance,
  &::Protocol::_C_AIATTACK_default_instance_._instance,
  &::Protocol::_S_AIATTACK_BOSS2_default_instance_._instance,
  &::Protocol::_C_AIATTACK_BOSS2_default_instance_._instance,
  &::Protocol::_S_AIROTATE_default_instance_._instance,
  &::Protocol::_C_AIROTATE_default_instance_._instance,
  &::Protocol::_S_AIHIT_default_instance_._instance,
  &::Protocol::_C_AIHIT_default_instance_._instance,
  &::Protocol::_S_DAMAGED_default_instance_._instance,
  &::Protocol::_C_DAMAGED_default_instance_._instance,
  &::Protocol::_S_AIDAMAGED_default_instance_._instance,
  &::Protocol::_C_AIDAMAGED_default_instance_._instance,
  &::Protocol::_S_AIDEAD_default_instance_._instance,
  &::Protocol::_C_AIDEAD_default_instance_._instance,
  &::Protocol::_S_PLAYERDEAD_default_instance_._instance,
  &::Protocol::_C_PLAYERDEAD_default_instance_._instance,
  &::Protocol::_S_AIPROJSPAWN_default_instance_._instance,
  &::Protocol::_C_AIPROJSPAWN_default_instance_._instance,
  &::Protocol::_S_AI_KNOCKS_BACK_default_instance_._instance,
  &::Protocol::_C_AI_KNOCKS_BACK_default_instance_._instance,
  &::Protocol::_S_PLAYERSKILL_BOMB_default_instance_._instance,
  &::Protocol::_C_PLAYERSKILL_BOMB_default_instance_._instance,
  &::Protocol::_S_PLAYERSKILL_GRANADE_default_instance_._instance,
  &::Protocol::_C_PLAYERSKILL_GRANADE_default_instance_._instance,
  &::Protocol::_S_PLAYERSKILL_CHEMICAL_default_instance_._instance,
  &::Protocol::_C_PLAYERSKILL_CHEMICAL_default_instance_._instance,
  &::Protocol::_S_PLAYERSKILL_GUARD_default_instance_._instance,
  &::Protocol::_C_PLAYERSKILL_GUARD_default_instance_._instance,
  &::Protocol::_S_PLAYERSKILL_HEAL_default_instance_._instance,
  &::Protocol::_C_PLAYERSKILL_HEAL_default_instance_._instance,
  &::Protocol::_S_PLAYERHEAL_default_instance_._instance,
  &::Protocol::_C_PLAYERHEAL_default_instance_._instance,
  &::Protocol::_S_MAKEDRONE_default_instance_._instance,
  &::Protocol::_C_MAKEDRONE_default_instance_._instance,
  &::Protocol::_S_MOVEDRONE_default_instance_._instance,
  &::Protocol::_C_MOVEDRONE_default_instance_._instance,
  &::Protocol::_S_SEARCHDRONE_default_instance_._instance,
  &::Protocol::_C_SEARCHDRONE_default_instance_._instance,
  &::Protocol::_S_RETURNDRONE_default_instance_._instance,
  &::Protocol::_C_RETURNDRONE_default_instance_._instance,
  &::Protocol::_S_ATTACKDRONE_default_instance_._instance,
  &::Protocol::_C_ATTACKDRONE_default_instance_._instance,
  &::Protocol::_S_EATITEM_MAXHPUP_default_instance_._instance,
  &::Protocol::_C_EATITEM_MAXHPUP_default_instance_._instance,
  &::Protocol::_S_EATITEM_LVUP_default_instance_._instance,
  &::Protocol::_C_EATITEM_LVUP_default_instance_._instance,
  &::Protocol::_S_EATITEM_DMGUP_default_instance_._instance,
  &::Protocol::_C_EATITEM_DMGUP_default_instance_._instance,
  &::Protocol::_S_EATITEM_HEALHP_default_instance_._instance,
  &::Protocol::_C_EATITEM_HEALHP_default_instance_._instance,
  &::Protocol::_S_SET_MAGNETICFIELD_default_instance_._instance,
  &::Protocol::_C_SET_MAGNETICFIELD_default_instance_._instance,
  &::Protocol::_S_WORLD_LVUP_default_instance_._instance,
  &::Protocol::_C_WORLD_LVUP_default_instance_._instance,
  &::Protocol::_S_GAMERESULT_default_instance_._instance,
  &::Protocol::_C_GAMERESULT_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"\t\n\007C_LOGIN\"\034\n\007S_LOGIN\022\021\n\tcl"
  "ient_ID\030\001 \001(\004\",\n\022C_PLAYERSPAWNPOINT\022\026\n\016S"
  "pawnPointSize\030\001 \001(\004\"$\n\rS_PLAYERCOUNT\022\023\n\013"
  "playerCount\030\001 \001(\004\"\017\n\rC_PLAYERCOUNT\"\r\n\013C_"
  "GAMESTART\"\r\n\013S_GAMESTART\"!\n\014C_ENTER_GAME"
  "\022\021\n\tclient_ID\030\001 \001(\004\"F\n\014S_ENTER_GAME\022$\n\006p"
  "layer\030\001 \001(\0132\024.Protocol.ObjectInfo\022\020\n\010spa"
  "wnIdx\030\002 \001(\004\"\016\n\014C_LEAVE_GAME\"\016\n\014S_LEAVE_G"
  "AME\"B\n\007S_SPAWN\022%\n\007players\030\001 \003(\0132\024.Protoc"
  "ol.ObjectInfo\022\020\n\010spawnIdx\030\002 \001(\004\"\037\n\tS_DES"
  "PAWN\022\022\n\nobject_ids\030\001 \003(\004\")\n\006C_MOVE\022\037\n\004in"
  "fo\030\001 \001(\0132\021.Protocol.PosInfo\")\n\006S_MOVE\022\037\n"
  "\004info\030\001 \001(\0132\021.Protocol.PosInfo\"\025\n\006C_CHAT"
  "\022\013\n\003msg\030\001 \001(\t\"\'\n\006S_CHAT\022\020\n\010playerId\030\001 \001("
  "\004\022\013\n\003msg\030\002 \001(\t\"6\n\006C_FIRE\022,\n\nprojectile\030\001"
  " \001(\0132\030.Protocol.ProjectileInfo\"6\n\006S_FIRE"
  "\022,\n\nprojectile\030\001 \001(\0132\030.Protocol.Projecti"
  "leInfo\":\n\005C_HIT\022\017\n\007ownerId\030\001 \001(\004\022\020\n\010targ"
  "etId\030\002 \001(\004\022\016\n\006damage\030\003 \001(\002\":\n\005S_HIT\022\017\n\007o"
  "wnerId\030\001 \001(\004\022\020\n\010targetId\030\002 \001(\004\022\016\n\006damage"
  "\030\003 \001(\002\"\'\n\007S_EXPUP\022\017\n\007ownerId\030\001 \001(\004\022\013\n\003ex"
  "p\030\002 \001(\002\"\'\n\007C_EXPUP\022\017\n\007ownerId\030\001 \001(\004\022\013\n\003e"
  "xp\030\002 \001(\002\"9\n\006S_LVUP\022\017\n\007ownerId\030\001 \001(\004\022\017\n\007c"
  "urrExp\030\002 \001(\002\022\r\n\005level\030\003 \001(\003\"9\n\006C_LVUP\022\017\n"
  "\007ownerId\030\001 \001(\004\022\017\n\007currExp\030\002 \001(\002\022\r\n\005level"
  "\030\003 \001(\003\"<\n\020C_AISPAWN_RANDOM\022\021\n\tobject_id\030"
  "\001 \001(\004\022\025\n\rcontainer_Idx\030\002 \001(\004\"<\n\020S_AISPAW"
  "N_RANDOM\022\021\n\tobject_id\030\001 \001(\004\022\025\n\rcontainer"
  "_Idx\030\002 \001(\004\"N\n\020C_AISPAWN_PATROL\022\021\n\tobject"
  "_id\030\001 \001(\004\022\025\n\rcontainer_Idx\030\002 \001(\004\022\020\n\010poin"
  "tIdx\030\003 \001(\004\"N\n\020S_AISPAWN_PATROL\022\021\n\tobject"
  "_id\030\001 \001(\004\022\025\n\rcontainer_Idx\030\002 \001(\004\022\020\n\010poin"
  "tIdx\030\003 \001(\004\":\n\016C_AISPAWN_BOSS\022\021\n\tobject_i"
  "d\030\001 \001(\004\022\025\n\rcontainer_Idx\030\002 \001(\004\":\n\016S_AISP"
  "AWN_BOSS\022\021\n\tobject_id\030\001 \001(\004\022\025\n\rcontainer"
  "_Idx\030\002 \001(\004\"+\n\010S_AIMOVE\022\037\n\004info\030\001 \001(\0132\021.P"
  "rotocol.PosInfo\"+\n\010C_AIMOVE\022\037\n\004info\030\001 \001("
  "\0132\021.Protocol.PosInfo\"0\n\014S_AIMOVESTOP\022\021\n\t"
  "object_id\030\001 \001(\004\022\r\n\005speed\030\002 \001(\002\"0\n\014C_AIMO"
  "VESTOP\022\021\n\tobject_id\030\001 \001(\004\022\r\n\005speed\030\002 \001(\002"
  "\"3\n\nS_AIATTACK\022\021\n\tobject_id\030\001 \001(\004\022\022\n\natt"
  "ack_idx\030\002 \001(\004\"3\n\nC_AIATTACK\022\021\n\tobject_id"
  "\030\001 \001(\004\022\022\n\nattack_idx\030\002 \001(\004\"8\n\020S_AIATTACK"
  "_BOSS2\022\021\n\tobject_id\030\001 \001(\004\022\021\n\ttarget_id\030\002"
  " \003(\004\"8\n\020C_AIATTACK_BOSS2\022\021\n\tobject_id\030\001 "
  "\001(\004\022\021\n\ttarget_id\030\002 \003(\004\"j\n\nS_AIROTATE\022\021\n\t"
  "object_id\030\001 \001(\004\022\013\n\003yaw\030\002 \001(\002\022\r\n\005pitch\030\003 "
  "\001(\002\022\014\n\004roll\030\004 \001(\002\022\t\n\001x\030\005 \001(\002\022\t\n\001y\030\006 \001(\002\022"
  "\t\n\001z\030\007 \001(\002\"j\n\nC_AIROTATE\022\021\n\tobject_id\030\001 "
  "\001(\004\022\013\n\003yaw\030\002 \001(\002\022\r\n\005pitch\030\003 \001(\002\022\014\n\004roll\030"
  "\004 \001(\002\022\t\n\001x\030\005 \001(\002\022\t\n\001y\030\006 \001(\002\022\t\n\001z\030\007 \001(\002\"\034"
  "\n\007S_AIHIT\022\021\n\tobject_id\030\001 \001(\004\"\034\n\007C_AIHIT\022"
  "\021\n\tobject_id\030\001 \001(\004\">\n\tS_DAMAGED\022\021\n\tobjec"
  "t_id\030\001 \001(\004\022\n\n\002hp\030\002 \001(\002\022\022\n\nguardPoint\030\003 \001"
  "(\002\">\n\tC_DAMAGED\022\021\n\tobject_id\030\001 \001(\004\022\n\n\002hp"
  "\030\002 \001(\002\022\022\n\nguardPoint\030\003 \001(\002\",\n\013S_AIDAMAGE"
  "D\022\021\n\tobject_id\030\001 \001(\004\022\n\n\002hp\030\002 \001(\002\",\n\013C_AI"
  "DAMAGED\022\021\n\tobject_id\030\001 \001(\004\022\n\n\002hp\030\002 \001(\002\"Q"
  "\n\010S_AIDEAD\022\021\n\tobject_id\030\001 \001(\004\022\014\n\004dead\030\002 "
  "\001(\010\022\027\n\017owner_object_id\030\003 \001(\004\022\013\n\003exp\030\004 \001("
  "\002\"Q\n\010C_AIDEAD\022\021\n\tobject_id\030\001 \001(\004\022\014\n\004dead"
  "\030\002 \001(\010\022\027\n\017owner_object_id\030\003 \001(\004\022\013\n\003exp\030\004"
  " \001(\002\"/\n\014S_PLAYERDEAD\022\021\n\tobject_id\030\001 \001(\004\022"
  "\014\n\004dead\030\002 \001(\010\"/\n\014C_PLAYERDEAD\022\021\n\tobject_"
  "id\030\001 \001(\004\022\014\n\004dead\030\002 \001(\010\"\240\001\n\rS_AIPROJSPAWN"
  "\022\021\n\tobject_id\030\001 \001(\004\022\017\n\007ProjIdx\030\002 \001(\003\022\t\n\001"
  "x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\022\013\n\003yaw\030\006 \001"
  "(\002\022\r\n\005pitch\030\007 \001(\002\022\014\n\004roll\030\010 \001(\002\022\r\n\005speed"
  "\030\t \001(\002\022\021\n\tattackDmg\030\n \001(\002\"\240\001\n\rC_AIPROJSP"
  "AWN\022\021\n\tobject_id\030\001 \001(\004\022\017\n\007ProjIdx\030\002 \001(\003\022"
  "\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\022\013\n\003yaw\030"
  "\006 \001(\002\022\r\n\005pitch\030\007 \001(\002\022\014\n\004roll\030\010 \001(\002\022\r\n\005sp"
  "eed\030\t \001(\002\022\021\n\tattackDmg\030\n \001(\002\"\\\n\020S_AI_KNO"
  "CKS_BACK\022\021\n\tobject_id\030\001 \001(\004\022\021\n\ttarget_id"
  "\030\002 \001(\004\022\n\n\002vx\030\003 \001(\002\022\n\n\002vy\030\004 \001(\002\022\n\n\002vz\030\005 \001"
  "(\002\"\\\n\020C_AI_KNOCKS_BACK\022\021\n\tobject_id\030\001 \001("
  "\004\022\021\n\ttarget_id\030\002 \001(\004\022\n\n\002vx\030\003 \001(\002\022\n\n\002vy\030\004"
  " \001(\002\022\n\n\002vz\030\005 \001(\002\"n\n\022S_PLAYERSKILL_BOMB\022\021"
  "\n\tobject_id\030\001 \001(\004\022\027\n\017abilityArrayIdx\030\002 \001"
  "(\004\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\022\013\n\003d"
  "mg\030\006 \001(\002\"n\n\022C_PLAYERSKILL_BOMB\022\021\n\tobject"
  "_id\030\001 \001(\004\022\027\n\017abilityArrayIdx\030\002 \001(\004\022\t\n\001x\030"
  "\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\022\013\n\003dmg\030\006 \001(\002"
  "\"\225\001\n\025S_PLAYERSKILL_GRANADE\022\021\n\tobject_id\030"
  "\001 \001(\004\022\027\n\017abilityArrayIdx\030\002 \001(\004\022\t\n\001x\030\003 \001("
  "\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 \001(\002\022\n\n\002rx\030\006 \001(\002\022\n\n\002r"
  "y\030\007 \001(\002\022\n\n\002rz\030\010 \001(\002\022\013\n\003dmg\030\t \001(\002\"\225\001\n\025C_P"
  "LAYERSKILL_GRANADE\022\021\n\tobject_id\030\001 \001(\004\022\027\n"
  "\017abilityArrayIdx\030\002 \001(\004\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004"
  " \001(\002\022\t\n\001z\030\005 \001(\002\022\n\n\002rx\030\006 \001(\002\022\n\n\002ry\030\007 \001(\002\022"
  "\n\n\002rz\030\010 \001(\002\022\013\n\003dmg\030\t \001(\002\"r\n\026S_PLAYERSKIL"
  "L_CHEMICAL\022\021\n\tobject_id\030\001 \001(\004\022\027\n\017ability"
  "ArrayIdx\030\002 \001(\004\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001"
  "z\030\005 \001(\002\022\013\n\003dmg\030\006 \001(\002\"r\n\026C_PLAYERSKILL_CH"
  "EMICAL\022\021\n\tobject_id\030\001 \001(\004\022\027\n\017abilityArra"
  "yIdx\030\002 \001(\004\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\t\n\001z\030\005 "
  "\001(\002\022\013\n\003dmg\030\006 \001(\002\"<\n\023S_PLAYERSKILL_GUARD\022"
  "\021\n\tobject_id\030\001 \001(\004\022\022\n\nguardPoint\030\002 \001(\004\"<"
  "\n\023C_PLAYERSKILL_GUARD\022\021\n\tobject_id\030\001 \001(\004"
  "\022\022\n\nguardPoint\030\002 \001(\004\"@\n\022S_PLAYERSKILL_HE"
  "AL\022\021\n\tobject_id\030\001 \001(\004\022\027\n\017abilityArrayIdx"
  "\030\002 \001(\004\"@\n\022C_PLAYERSKILL_HEAL\022\021\n\tobject_i"
  "d\030\001 \001(\004\022\027\n\017abilityArrayIdx\030\002 \001(\004\"5\n\014S_PL"
  "AYERHEAL\022\021\n\tobject_id\030\001 \001(\004\022\022\n\nupdeatedH"
  "P\030\002 \001(\004\"5\n\014C_PLAYERHEAL\022\021\n\tobject_id\030\001 \001"
  "(\004\022\022\n\nupdeatedHP\030\002 \001(\004\"9\n\013S_MAKEDRONE\022\021\n"
  "\tobject_id\030\001 \001(\004\022\027\n\017abilityArrayIdx\030\002 \001("
  "\004\"9\n\013C_MAKEDRONE\022\021\n\tobject_id\030\001 \001(\004\022\027\n\017a"
  "bilityArrayIdx\030\002 \001(\004\"A\n\013S_MOVEDRONE\022\021\n\to"
  "bject_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001"
  "z\030\004 \001(\002\"A\n\013C_MOVEDRONE\022\021\n\tobject_id\030\001 \001("
  "\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"m\n\rS_"
  "SEARCHDRONE\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030\002 \001("
  "\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\013\n\003yaw\030\005 \001(\002\022\r\n\005"
  "pitch\030\006 \001(\002\022\014\n\004roll\030\007 \001(\002\"m\n\rC_SEARCHDRO"
  "NE\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 "
  "\001(\002\022\t\n\001z\030\004 \001(\002\022\013\n\003yaw\030\005 \001(\002\022\r\n\005pitch\030\006 \001"
  "(\002\022\014\n\004roll\030\007 \001(\002\"\"\n\rS_RETURNDRONE\022\021\n\tobj"
  "ect_id\030\001 \001(\004\"\"\n\rC_RETURNDRONE\022\021\n\tobject_"
  "id\030\001 \001(\004\"\"\n\rS_ATTACKDRONE\022\021\n\tobject_id\030\001"
  " \001(\004\"\"\n\rC_ATTACKDRONE\022\021\n\tobject_id\030\001 \001(\004"
  "\"5\n\021S_EATITEM_MAXHPUP\022\021\n\tobject_id\030\001 \001(\004"
  "\022\r\n\005maxHP\030\002 \001(\002\"5\n\021C_EATITEM_MAXHPUP\022\021\n\t"
  "object_id\030\001 \001(\004\022\r\n\005maxHP\030\002 \001(\002\"2\n\016S_EATI"
  "TEM_LVUP\022\021\n\tobject_id\030\001 \001(\004\022\r\n\005curLV\030\002 \001"
  "(\003\"2\n\016C_EATITEM_LVUP\022\021\n\tobject_id\030\001 \001(\004\022"
  "\r\n\005curLV\030\002 \001(\003\"7\n\017S_EATITEM_DMGUP\022\021\n\tobj"
  "ect_id\030\001 \001(\004\022\021\n\tattackDmg\030\002 \001(\002\"7\n\017C_EAT"
  "ITEM_DMGUP\022\021\n\tobject_id\030\001 \001(\004\022\021\n\tattackD"
  "mg\030\002 \001(\002\"4\n\020S_EATITEM_HEALHP\022\021\n\tobject_i"
  "d\030\001 \001(\004\022\r\n\005curHP\030\002 \001(\002\"4\n\020C_EATITEM_HEAL"
  "HP\022\021\n\tobject_id\030\001 \001(\004\022\r\n\005curHP\030\002 \001(\002\"_\n\023"
  "S_SET_MAGNETICFIELD\022\t\n\001r\030\001 \001(\002\022\t\n\001g\030\002 \001("
  "\002\022\t\n\001b\030\003 \001(\002\022\t\n\001a\030\004 \001(\002\022\016\n\006radius\030\005 \001(\002\022"
  "\014\n\004time\030\006 \001(\002\"_\n\023C_SET_MAGNETICFIELD\022\t\n\001"
  "r\030\001 \001(\002\022\t\n\001g\030\002 \001(\002\022\t\n\001b\030\003 \001(\002\022\t\n\001a\030\004 \001(\002"
  "\022\016\n\006radius\030\005 \001(\002\022\014\n\004time\030\006 \001(\002\"\"\n\014S_WORL"
  "D_LVUP\022\022\n\nworldLevel\030\001 \001(\003\"\"\n\014C_WORLD_LV"
  "UP\022\022\n\nworldLevel\030\001 \001(\003\"!\n\014S_GAMERESULT\022\021"
  "\n\tobject_id\030\001 \001(\004\"!\n\014C_GAMERESULT\022\021\n\tobj"
  "ect_id\030\001 \001(\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 5660, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 91,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C_LOGIN::_Internal {
 public:
};

C_LOGIN::C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGIN)
}
C_LOGIN::C_LOGIN(const C_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_LOGIN* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGIN)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOGIN::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
};

S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.client_id_ = from._impl_.client_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

inline void S_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 client_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_ID = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 client_ID = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOGIN::GetClassData() const { return &_class_data_; }


void S_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LOGIN*>(&to_msg);
  auto& from = static_cast<const S_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.client_id_, other->_impl_.client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_PLAYERSPAWNPOINT::_Internal {
 public:
};

C_PLAYERSPAWNPOINT::C_PLAYERSPAWNPOINT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYERSPAWNPOINT)
}
C_PLAYERSPAWNPOINT::C_PLAYERSPAWNPOINT(const C_PLAYERSPAWNPOINT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYERSPAWNPOINT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spawnpointsize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.spawnpointsize_ = from._impl_.spawnpointsize_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYERSPAWNPOINT)
}

inline void C_PLAYERSPAWNPOINT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spawnpointsize_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYERSPAWNPOINT::~C_PLAYERSPAWNPOINT() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYERSPAWNPOINT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYERSPAWNPOINT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_PLAYERSPAWNPOINT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYERSPAWNPOINT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYERSPAWNPOINT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spawnpointsize_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYERSPAWNPOINT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 SpawnPointSize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.spawnpointsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYERSPAWNPOINT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYERSPAWNPOINT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 SpawnPointSize = 1;
  if (this->_internal_spawnpointsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_spawnpointsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYERSPAWNPOINT)
  return target;
}

size_t C_PLAYERSPAWNPOINT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYERSPAWNPOINT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 SpawnPointSize = 1;
  if (this->_internal_spawnpointsize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_spawnpointsize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYERSPAWNPOINT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYERSPAWNPOINT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYERSPAWNPOINT::GetClassData() const { return &_class_data_; }


void C_PLAYERSPAWNPOINT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYERSPAWNPOINT*>(&to_msg);
  auto& from = static_cast<const C_PLAYERSPAWNPOINT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYERSPAWNPOINT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_spawnpointsize() != 0) {
    _this->_internal_set_spawnpointsize(from._internal_spawnpointsize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYERSPAWNPOINT::CopyFrom(const C_PLAYERSPAWNPOINT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYERSPAWNPOINT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYERSPAWNPOINT::IsInitialized() const {
  return true;
}

void C_PLAYERSPAWNPOINT::InternalSwap(C_PLAYERSPAWNPOINT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.spawnpointsize_, other->_impl_.spawnpointsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYERSPAWNPOINT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_PLAYERCOUNT::_Internal {
 public:
};

S_PLAYERCOUNT::S_PLAYERCOUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYERCOUNT)
}
S_PLAYERCOUNT::S_PLAYERCOUNT(const S_PLAYERCOUNT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYERCOUNT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playercount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playercount_ = from._impl_.playercount_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYERCOUNT)
}

inline void S_PLAYERCOUNT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playercount_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYERCOUNT::~S_PLAYERCOUNT() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYERCOUNT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYERCOUNT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PLAYERCOUNT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYERCOUNT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYERCOUNT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playercount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYERCOUNT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 playerCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYERCOUNT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYERCOUNT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerCount = 1;
  if (this->_internal_playercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playercount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYERCOUNT)
  return target;
}

size_t S_PLAYERCOUNT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYERCOUNT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 playerCount = 1;
  if (this->_internal_playercount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playercount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYERCOUNT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYERCOUNT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYERCOUNT::GetClassData() const { return &_class_data_; }


void S_PLAYERCOUNT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYERCOUNT*>(&to_msg);
  auto& from = static_cast<const S_PLAYERCOUNT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYERCOUNT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playercount() != 0) {
    _this->_internal_set_playercount(from._internal_playercount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYERCOUNT::CopyFrom(const S_PLAYERCOUNT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYERCOUNT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYERCOUNT::IsInitialized() const {
  return true;
}

void S_PLAYERCOUNT::InternalSwap(S_PLAYERCOUNT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playercount_, other->_impl_.playercount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYERCOUNT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class C_PLAYERCOUNT::_Internal {
 public:
};

C_PLAYERCOUNT::C_PLAYERCOUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYERCOUNT)
}
C_PLAYERCOUNT::C_PLAYERCOUNT(const C_PLAYERCOUNT& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_PLAYERCOUNT* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYERCOUNT)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYERCOUNT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYERCOUNT::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYERCOUNT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class C_GAMESTART::_Internal {
 public:
};

C_GAMESTART::C_GAMESTART(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_GAMESTART)
}
C_GAMESTART::C_GAMESTART(const C_GAMESTART& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_GAMESTART* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_GAMESTART)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_GAMESTART::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_GAMESTART::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_GAMESTART::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S_GAMESTART::_Internal {
 public:
};

S_GAMESTART::S_GAMESTART(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_GAMESTART)
}
S_GAMESTART::S_GAMESTART(const S_GAMESTART& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S_GAMESTART* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_GAMESTART)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_GAMESTART::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_GAMESTART::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_GAMESTART::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class C_ENTER_GAME::_Internal {
 public:
};

C_ENTER_GAME::C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER_GAME)
}
C_ENTER_GAME::C_ENTER_GAME(const C_ENTER_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ENTER_GAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.client_id_ = from._impl_.client_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER_GAME)
}

inline void C_ENTER_GAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_ENTER_GAME::~C_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENTER_GAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ENTER_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ENTER_GAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ENTER_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 client_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ENTER_GAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_ID = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER_GAME)
  return target;
}

size_t C_ENTER_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER_GAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 client_ID = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENTER_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ENTER_GAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ENTER_GAME::GetClassData() const { return &_class_data_; }


void C_ENTER_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ENTER_GAME*>(&to_msg);
  auto& from = static_cast<const C_ENTER_GAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ENTER_GAME::CopyFrom(const C_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER_GAME::IsInitialized() const {
  return true;
}

void C_ENTER_GAME::InternalSwap(C_ENTER_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.client_id_, other->_impl_.client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_ENTER_GAME::_Internal {
 public:
  static const ::Protocol::ObjectInfo& player(const S_ENTER_GAME* msg);
};

const ::Protocol::ObjectInfo&
S_ENTER_GAME::_Internal::player(const S_ENTER_GAME* msg) {
  return *msg->_impl_.player_;
}
void S_ENTER_GAME::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_ENTER_GAME::S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER_GAME)
}
S_ENTER_GAME::S_ENTER_GAME(const S_ENTER_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENTER_GAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.spawnidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
  }
  _this->_impl_.spawnidx_ = from._impl_.spawnidx_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER_GAME)
}

inline void S_ENTER_GAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.spawnidx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ENTER_GAME::~S_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER_GAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENTER_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_ENTER_GAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENTER_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.spawnidx_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ObjectInfo player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 spawnIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.spawnidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENTER_GAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ObjectInfo player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // uint64 spawnIdx = 2;
  if (this->_internal_spawnidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_spawnidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER_GAME)
  return target;
}

size_t S_ENTER_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER_GAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint64 spawnIdx = 2;
  if (this->_internal_spawnidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_spawnidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTER_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENTER_GAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENTER_GAME::GetClassData() const { return &_class_data_; }


void S_ENTER_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENTER_GAME*>(&to_msg);
  auto& from = static_cast<const S_ENTER_GAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_player());
  }
  if (from._internal_spawnidx() != 0) {
    _this->_internal_set_spawnidx(from._internal_spawnidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENTER_GAME::CopyFrom(const S_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER_GAME::IsInitialized() const {
  return true;
}

void S_ENTER_GAME::InternalSwap(S_ENTER_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.spawnidx_)
      + sizeof(S_ENTER_GAME::_impl_.spawnidx_)
      - PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class C_LEAVE_GAME::_Internal {
 public:
};

C_LEAVE_GAME::C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LEAVE_GAME)
}
C_LEAVE_GAME::C_LEAVE_GAME(const C_LEAVE_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_LEAVE_GAME* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LEAVE_GAME)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LEAVE_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LEAVE_GAME::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_LEAVE_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class S_LEAVE_GAME::_Internal {
 public:
};

S_LEAVE_GAME::S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LEAVE_GAME)
}
S_LEAVE_GAME::S_LEAVE_GAME(const S_LEAVE_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S_LEAVE_GAME* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LEAVE_GAME)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LEAVE_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LEAVE_GAME::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_LEAVE_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class S_SPAWN::_Internal {
 public:
};

void S_SPAWN::clear_players() {
  _impl_.players_.Clear();
}
S_SPAWN::S_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWN)
}
S_SPAWN::S_SPAWN(const S_SPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.spawnidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.spawnidx_ = from._impl_.spawnidx_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWN)
}

inline void S_SPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.spawnidx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SPAWN::~S_SPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void S_SPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.spawnidx_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ObjectInfo players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 spawnIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.spawnidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 spawnIdx = 2;
  if (this->_internal_spawnidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_spawnidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWN)
  return target;
}

size_t S_SPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 spawnIdx = 2;
  if (this->_internal_spawnidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_spawnidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SPAWN::GetClassData() const { return &_class_data_; }


void S_SPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SPAWN*>(&to_msg);
  auto& from = static_cast<const S_SPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_spawnidx() != 0) {
    _this->_internal_set_spawnidx(from._internal_spawnidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SPAWN::CopyFrom(const S_SPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWN::IsInitialized() const {
  return true;
}

void S_SPAWN::InternalSwap(S_SPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.spawnidx_, other->_impl_.spawnidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class S_DESPAWN::_Internal {
 public:
};

S_DESPAWN::S_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DESPAWN)
}
S_DESPAWN::S_DESPAWN(const S_DESPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_DESPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_ids_){from._impl_.object_ids_}
    , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DESPAWN)
}

inline void S_DESPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_ids_){arena}
    , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_DESPAWN::~S_DESPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_DESPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DESPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_ids_.~RepeatedField();
}

void S_DESPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_DESPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DESPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DESPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 object_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DESPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DESPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1;
  {
    int byte_size = _impl_._object_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_object_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DESPAWN)
  return target;
}

size_t S_DESPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DESPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.object_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._object_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DESPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_DESPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DESPAWN::GetClassData() const { return &_class_data_; }


void S_DESPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_DESPAWN*>(&to_msg);
  auto& from = static_cast<const S_DESPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DESPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.object_ids_.MergeFrom(from._impl_.object_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DESPAWN::CopyFrom(const S_DESPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DESPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DESPAWN::IsInitialized() const {
  return true;
}

void S_DESPAWN::InternalSwap(S_DESPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.object_ids_.InternalSwap(&other->_impl_.object_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DESPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class C_MOVE::_Internal {
 public:
  static const ::Protocol::PosInfo& info(const C_MOVE* msg);
};

const ::Protocol::PosInfo&
C_MOVE::_Internal::info(const C_MOVE* msg) {
  return *msg->_impl_.info_;
}
void C_MOVE::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
C_MOVE::C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MOVE)
}
C_MOVE::C_MOVE(const C_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::PosInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MOVE)
}

inline void C_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MOVE::~C_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.C_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void C_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PosInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MOVE)
  return target;
}

size_t C_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MOVE::GetClassData() const { return &_class_data_; }


void C_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MOVE*>(&to_msg);
  auto& from = static_cast<const C_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MOVE::CopyFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MOVE::IsInitialized() const {
  return true;
}

void C_MOVE::InternalSwap(C_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class S_MOVE::_Internal {
 public:
  static const ::Protocol::PosInfo& info(const S_MOVE* msg);
};

const ::Protocol::PosInfo&
S_MOVE::_Internal::info(const S_MOVE* msg) {
  return *msg->_impl_.info_;
}
void S_MOVE::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
S_MOVE::S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MOVE)
}
S_MOVE::S_MOVE(const S_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::PosInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MOVE)
}

inline void S_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_MOVE::~S_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.S_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void S_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PosInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MOVE)
  return target;
}

size_t S_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MOVE::GetClassData() const { return &_class_data_; }


void S_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MOVE*>(&to_msg);
  auto& from = static_cast<const S_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MOVE::CopyFrom(const S_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MOVE::IsInitialized() const {
  return true;
}

void S_MOVE::InternalSwap(S_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class C_CHAT::_Internal {
 public:
};

C_CHAT::C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHAT)
}
C_CHAT::C_CHAT(const C_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHAT)
}

inline void C_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CHAT::~C_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void C_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHAT)
  return target;
}

size_t C_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHAT::GetClassData() const { return &_class_data_; }


void C_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CHAT*>(&to_msg);
  auto& from = static_cast<const C_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHAT::CopyFrom(const C_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHAT::IsInitialized() const {
  return true;
}

void C_CHAT::InternalSwap(C_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class S_CHAT::_Internal {
 public:
};

S_CHAT::S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT)
}
S_CHAT::S_CHAT(const S_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT)
}

inline void S_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.playerid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_CHAT::~S_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void S_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.playerid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT)
  return target;
}

size_t S_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHAT::GetClassData() const { return &_class_data_; }


void S_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CHAT*>(&to_msg);
  auto& from = static_cast<const S_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHAT::CopyFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT::IsInitialized() const {
  return true;
}

void S_CHAT::InternalSwap(S_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class C_FIRE::_Internal {
 public:
  static const ::Protocol::ProjectileInfo& projectile(const C_FIRE* msg);
};

const ::Protocol::ProjectileInfo&
C_FIRE::_Internal::projectile(const C_FIRE* msg) {
  return *msg->_impl_.projectile_;
}
void C_FIRE::clear_projectile() {
  if (GetArenaForAllocation() == nullptr && _impl_.projectile_ != nullptr) {
    delete _impl_.projectile_;
  }
  _impl_.projectile_ = nullptr;
}
C_FIRE::C_FIRE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_FIRE)
}
C_FIRE::C_FIRE(const C_FIRE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_FIRE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.projectile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_projectile()) {
    _this->_impl_.projectile_ = new ::Protocol::ProjectileInfo(*from._impl_.projectile_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_FIRE)
}

inline void C_FIRE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.projectile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_FIRE::~C_FIRE() {
  // @@protoc_insertion_point(destructor:Protocol.C_FIRE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_FIRE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.projectile_;
}

void C_FIRE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_FIRE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_FIRE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.projectile_ != nullptr) {
    delete _impl_.projectile_;
  }
  _impl_.projectile_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_FIRE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ProjectileInfo projectile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_FIRE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_FIRE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ProjectileInfo projectile = 1;
  if (this->_internal_has_projectile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::projectile(this),
        _Internal::projectile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_FIRE)
  return target;
}

size_t C_FIRE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_FIRE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ProjectileInfo projectile = 1;
  if (this->_internal_has_projectile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectile_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_FIRE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_FIRE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_FIRE::GetClassData() const { return &_class_data_; }


void C_FIRE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_FIRE*>(&to_msg);
  auto& from = static_cast<const C_FIRE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_FIRE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_projectile()) {
    _this->_internal_mutable_projectile()->::Protocol::ProjectileInfo::MergeFrom(
        from._internal_projectile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_FIRE::CopyFrom(const C_FIRE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_FIRE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_FIRE::IsInitialized() const {
  return true;
}

void C_FIRE::InternalSwap(C_FIRE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.projectile_, other->_impl_.projectile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_FIRE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// ===================================================================

class S_FIRE::_Internal {
 public:
  static const ::Protocol::ProjectileInfo& projectile(const S_FIRE* msg);
};

const ::Protocol::ProjectileInfo&
S_FIRE::_Internal::projectile(const S_FIRE* msg) {
  return *msg->_impl_.projectile_;
}
void S_FIRE::clear_projectile() {
  if (GetArenaForAllocation() == nullptr && _impl_.projectile_ != nullptr) {
    delete _impl_.projectile_;
  }
  _impl_.projectile_ = nullptr;
}
S_FIRE::S_FIRE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FIRE)
}
S_FIRE::S_FIRE(const S_FIRE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_FIRE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.projectile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_projectile()) {
    _this->_impl_.projectile_ = new ::Protocol::ProjectileInfo(*from._impl_.projectile_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FIRE)
}

inline void S_FIRE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.projectile_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_FIRE::~S_FIRE() {
  // @@protoc_insertion_point(destructor:Protocol.S_FIRE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_FIRE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.projectile_;
}

void S_FIRE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_FIRE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_FIRE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.projectile_ != nullptr) {
    delete _impl_.projectile_;
  }
  _impl_.projectile_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_FIRE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ProjectileInfo projectile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_FIRE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_FIRE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ProjectileInfo projectile = 1;
  if (this->_internal_has_projectile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::projectile(this),
        _Internal::projectile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_FIRE)
  return target;
}

size_t S_FIRE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_FIRE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ProjectileInfo projectile = 1;
  if (this->_internal_has_projectile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectile_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FIRE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_FIRE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FIRE::GetClassData() const { return &_class_data_; }


void S_FIRE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_FIRE*>(&to_msg);
  auto& from = static_cast<const S_FIRE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_FIRE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_projectile()) {
    _this->_internal_mutable_projectile()->::Protocol::ProjectileInfo::MergeFrom(
        from._internal_projectile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_FIRE::CopyFrom(const S_FIRE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_FIRE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_FIRE::IsInitialized() const {
  return true;
}

void S_FIRE::InternalSwap(S_FIRE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.projectile_, other->_impl_.projectile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_FIRE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[18]);
}

// ===================================================================

class C_HIT::_Internal {
 public:
};

C_HIT::C_HIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_HIT)
}
C_HIT::C_HIT(const C_HIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_HIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ownerid_, &from._impl_.ownerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_HIT)
}

inline void C_HIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){uint64_t{0u}}
    , decltype(_impl_.targetid_){uint64_t{0u}}
    , decltype(_impl_.damage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_HIT::~C_HIT() {
  // @@protoc_insertion_point(destructor:Protocol.C_HIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_HIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_HIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_HIT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_HIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ownerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_HIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ownerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 targetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_HIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_HIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ownerid(), target);
  }

  // uint64 targetId = 2;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_targetid(), target);
  }

  // float damage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_HIT)
  return target;
}

size_t C_HIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_HIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ownerid());
  }

  // uint64 targetId = 2;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_targetid());
  }

  // float damage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_HIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_HIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_HIT::GetClassData() const { return &_class_data_; }


void C_HIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_HIT*>(&to_msg);
  auto& from = static_cast<const C_HIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_HIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ownerid() != 0) {
    _this->_internal_set_ownerid(from._internal_ownerid());
  }
  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = from._internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_HIT::CopyFrom(const C_HIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_HIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_HIT::IsInitialized() const {
  return true;
}

void C_HIT::InternalSwap(C_HIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_HIT, _impl_.damage_)
      + sizeof(C_HIT::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(C_HIT, _impl_.ownerid_)>(
          reinterpret_cast<char*>(&_impl_.ownerid_),
          reinterpret_cast<char*>(&other->_impl_.ownerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_HIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[19]);
}

// ===================================================================

class S_HIT::_Internal {
 public:
};

S_HIT::S_HIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_HIT)
}
S_HIT::S_HIT(const S_HIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_HIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ownerid_, &from._impl_.ownerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_HIT)
}

inline void S_HIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){uint64_t{0u}}
    , decltype(_impl_.targetid_){uint64_t{0u}}
    , decltype(_impl_.damage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_HIT::~S_HIT() {
  // @@protoc_insertion_point(destructor:Protocol.S_HIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_HIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_HIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_HIT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_HIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ownerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_HIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ownerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 targetId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_HIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_HIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ownerid(), target);
  }

  // uint64 targetId = 2;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_targetid(), target);
  }

  // float damage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_HIT)
  return target;
}

size_t S_HIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_HIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ownerid());
  }

  // uint64 targetId = 2;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_targetid());
  }

  // float damage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_HIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_HIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_HIT::GetClassData() const { return &_class_data_; }


void S_HIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_HIT*>(&to_msg);
  auto& from = static_cast<const S_HIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_HIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ownerid() != 0) {
    _this->_internal_set_ownerid(from._internal_ownerid());
  }
  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = from._internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_HIT::CopyFrom(const S_HIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_HIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_HIT::IsInitialized() const {
  return true;
}

void S_HIT::InternalSwap(S_HIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_HIT, _impl_.damage_)
      + sizeof(S_HIT::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(S_HIT, _impl_.ownerid_)>(
          reinterpret_cast<char*>(&_impl_.ownerid_),
          reinterpret_cast<char*>(&other->_impl_.ownerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_HIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[20]);
}

// ===================================================================

class S_EXPUP::_Internal {
 public:
};

S_EXPUP::S_EXPUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_EXPUP)
}
S_EXPUP::S_EXPUP(const S_EXPUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_EXPUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){}
    , decltype(_impl_.exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ownerid_, &from._impl_.ownerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exp_) -
    reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.exp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_EXPUP)
}

inline void S_EXPUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){uint64_t{0u}}
    , decltype(_impl_.exp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_EXPUP::~S_EXPUP() {
  // @@protoc_insertion_point(destructor:Protocol.S_EXPUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_EXPUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_EXPUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_EXPUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_EXPUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ownerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exp_) -
      reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_EXPUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ownerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_EXPUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_EXPUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ownerid(), target);
  }

  // float exp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_EXPUP)
  return target;
}

size_t S_EXPUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_EXPUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ownerid());
  }

  // float exp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_EXPUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_EXPUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_EXPUP::GetClassData() const { return &_class_data_; }


void S_EXPUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_EXPUP*>(&to_msg);
  auto& from = static_cast<const S_EXPUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_EXPUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ownerid() != 0) {
    _this->_internal_set_ownerid(from._internal_ownerid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = from._internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_EXPUP::CopyFrom(const S_EXPUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_EXPUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_EXPUP::IsInitialized() const {
  return true;
}

void S_EXPUP::InternalSwap(S_EXPUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_EXPUP, _impl_.exp_)
      + sizeof(S_EXPUP::_impl_.exp_)
      - PROTOBUF_FIELD_OFFSET(S_EXPUP, _impl_.ownerid_)>(
          reinterpret_cast<char*>(&_impl_.ownerid_),
          reinterpret_cast<char*>(&other->_impl_.ownerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_EXPUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[21]);
}

// ===================================================================

class C_EXPUP::_Internal {
 public:
};

C_EXPUP::C_EXPUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_EXPUP)
}
C_EXPUP::C_EXPUP(const C_EXPUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_EXPUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){}
    , decltype(_impl_.exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ownerid_, &from._impl_.ownerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exp_) -
    reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.exp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_EXPUP)
}

inline void C_EXPUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){uint64_t{0u}}
    , decltype(_impl_.exp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_EXPUP::~C_EXPUP() {
  // @@protoc_insertion_point(destructor:Protocol.C_EXPUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_EXPUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_EXPUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_EXPUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_EXPUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ownerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exp_) -
      reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_EXPUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ownerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_EXPUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_EXPUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ownerid(), target);
  }

  // float exp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_EXPUP)
  return target;
}

size_t C_EXPUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_EXPUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ownerid());
  }

  // float exp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_EXPUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_EXPUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_EXPUP::GetClassData() const { return &_class_data_; }


void C_EXPUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_EXPUP*>(&to_msg);
  auto& from = static_cast<const C_EXPUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_EXPUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ownerid() != 0) {
    _this->_internal_set_ownerid(from._internal_ownerid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = from._internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_EXPUP::CopyFrom(const C_EXPUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_EXPUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_EXPUP::IsInitialized() const {
  return true;
}

void C_EXPUP::InternalSwap(C_EXPUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_EXPUP, _impl_.exp_)
      + sizeof(C_EXPUP::_impl_.exp_)
      - PROTOBUF_FIELD_OFFSET(C_EXPUP, _impl_.ownerid_)>(
          reinterpret_cast<char*>(&_impl_.ownerid_),
          reinterpret_cast<char*>(&other->_impl_.ownerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_EXPUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[22]);
}

// ===================================================================

class S_LVUP::_Internal {
 public:
};

S_LVUP::S_LVUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LVUP)
}
S_LVUP::S_LVUP(const S_LVUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LVUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.currexp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ownerid_, &from._impl_.ownerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currexp_) -
    reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.currexp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LVUP)
}

inline void S_LVUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){uint64_t{0u}}
    , decltype(_impl_.level_){int64_t{0}}
    , decltype(_impl_.currexp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LVUP::~S_LVUP() {
  // @@protoc_insertion_point(destructor:Protocol.S_LVUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LVUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LVUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LVUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LVUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ownerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.currexp_) -
      reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.currexp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LVUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ownerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float currExp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.currexp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LVUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LVUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ownerid(), target);
  }

  // float currExp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currexp = this->_internal_currexp();
  uint32_t raw_currexp;
  memcpy(&raw_currexp, &tmp_currexp, sizeof(tmp_currexp));
  if (raw_currexp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_currexp(), target);
  }

  // int64 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LVUP)
  return target;
}

size_t S_LVUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LVUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ownerid());
  }

  // int64 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_level());
  }

  // float currExp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currexp = this->_internal_currexp();
  uint32_t raw_currexp;
  memcpy(&raw_currexp, &tmp_currexp, sizeof(tmp_currexp));
  if (raw_currexp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LVUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LVUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LVUP::GetClassData() const { return &_class_data_; }


void S_LVUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LVUP*>(&to_msg);
  auto& from = static_cast<const S_LVUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LVUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ownerid() != 0) {
    _this->_internal_set_ownerid(from._internal_ownerid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currexp = from._internal_currexp();
  uint32_t raw_currexp;
  memcpy(&raw_currexp, &tmp_currexp, sizeof(tmp_currexp));
  if (raw_currexp != 0) {
    _this->_internal_set_currexp(from._internal_currexp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LVUP::CopyFrom(const S_LVUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LVUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LVUP::IsInitialized() const {
  return true;
}

void S_LVUP::InternalSwap(S_LVUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LVUP, _impl_.currexp_)
      + sizeof(S_LVUP::_impl_.currexp_)
      - PROTOBUF_FIELD_OFFSET(S_LVUP, _impl_.ownerid_)>(
          reinterpret_cast<char*>(&_impl_.ownerid_),
          reinterpret_cast<char*>(&other->_impl_.ownerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LVUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[23]);
}

// ===================================================================

class C_LVUP::_Internal {
 public:
};

C_LVUP::C_LVUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LVUP)
}
C_LVUP::C_LVUP(const C_LVUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_LVUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.currexp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ownerid_, &from._impl_.ownerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currexp_) -
    reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.currexp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LVUP)
}

inline void C_LVUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){uint64_t{0u}}
    , decltype(_impl_.level_){int64_t{0}}
    , decltype(_impl_.currexp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_LVUP::~C_LVUP() {
  // @@protoc_insertion_point(destructor:Protocol.C_LVUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LVUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_LVUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_LVUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LVUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ownerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.currexp_) -
      reinterpret_cast<char*>(&_impl_.ownerid_)) + sizeof(_impl_.currexp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LVUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ownerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ownerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float currExp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.currexp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LVUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LVUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ownerid(), target);
  }

  // float currExp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currexp = this->_internal_currexp();
  uint32_t raw_currexp;
  memcpy(&raw_currexp, &tmp_currexp, sizeof(tmp_currexp));
  if (raw_currexp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_currexp(), target);
  }

  // int64 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LVUP)
  return target;
}

size_t C_LVUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LVUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ownerId = 1;
  if (this->_internal_ownerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ownerid());
  }

  // int64 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_level());
  }

  // float currExp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currexp = this->_internal_currexp();
  uint32_t raw_currexp;
  memcpy(&raw_currexp, &tmp_currexp, sizeof(tmp_currexp));
  if (raw_currexp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LVUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_LVUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LVUP::GetClassData() const { return &_class_data_; }


void C_LVUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_LVUP*>(&to_msg);
  auto& from = static_cast<const C_LVUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LVUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ownerid() != 0) {
    _this->_internal_set_ownerid(from._internal_ownerid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_currexp = from._internal_currexp();
  uint32_t raw_currexp;
  memcpy(&raw_currexp, &tmp_currexp, sizeof(tmp_currexp));
  if (raw_currexp != 0) {
    _this->_internal_set_currexp(from._internal_currexp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LVUP::CopyFrom(const C_LVUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LVUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LVUP::IsInitialized() const {
  return true;
}

void C_LVUP::InternalSwap(C_LVUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_LVUP, _impl_.currexp_)
      + sizeof(C_LVUP::_impl_.currexp_)
      - PROTOBUF_FIELD_OFFSET(C_LVUP, _impl_.ownerid_)>(
          reinterpret_cast<char*>(&_impl_.ownerid_),
          reinterpret_cast<char*>(&other->_impl_.ownerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LVUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[24]);
}

// ===================================================================

class C_AISPAWN_RANDOM::_Internal {
 public:
};

C_AISPAWN_RANDOM::C_AISPAWN_RANDOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AISPAWN_RANDOM)
}
C_AISPAWN_RANDOM::C_AISPAWN_RANDOM(const C_AISPAWN_RANDOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AISPAWN_RANDOM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.container_idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.container_idx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.container_idx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AISPAWN_RANDOM)
}

inline void C_AISPAWN_RANDOM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.container_idx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AISPAWN_RANDOM::~C_AISPAWN_RANDOM() {
  // @@protoc_insertion_point(destructor:Protocol.C_AISPAWN_RANDOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AISPAWN_RANDOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AISPAWN_RANDOM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AISPAWN_RANDOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AISPAWN_RANDOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.container_idx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.container_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AISPAWN_RANDOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 container_Idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.container_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AISPAWN_RANDOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AISPAWN_RANDOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_container_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AISPAWN_RANDOM)
  return target;
}

size_t C_AISPAWN_RANDOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AISPAWN_RANDOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_container_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AISPAWN_RANDOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AISPAWN_RANDOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AISPAWN_RANDOM::GetClassData() const { return &_class_data_; }


void C_AISPAWN_RANDOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AISPAWN_RANDOM*>(&to_msg);
  auto& from = static_cast<const C_AISPAWN_RANDOM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AISPAWN_RANDOM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_container_idx() != 0) {
    _this->_internal_set_container_idx(from._internal_container_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AISPAWN_RANDOM::CopyFrom(const C_AISPAWN_RANDOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AISPAWN_RANDOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AISPAWN_RANDOM::IsInitialized() const {
  return true;
}

void C_AISPAWN_RANDOM::InternalSwap(C_AISPAWN_RANDOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_AISPAWN_RANDOM, _impl_.container_idx_)
      + sizeof(C_AISPAWN_RANDOM::_impl_.container_idx_)
      - PROTOBUF_FIELD_OFFSET(C_AISPAWN_RANDOM, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AISPAWN_RANDOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[25]);
}

// ===================================================================

class S_AISPAWN_RANDOM::_Internal {
 public:
};

S_AISPAWN_RANDOM::S_AISPAWN_RANDOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AISPAWN_RANDOM)
}
S_AISPAWN_RANDOM::S_AISPAWN_RANDOM(const S_AISPAWN_RANDOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AISPAWN_RANDOM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.container_idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.container_idx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.container_idx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AISPAWN_RANDOM)
}

inline void S_AISPAWN_RANDOM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.container_idx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AISPAWN_RANDOM::~S_AISPAWN_RANDOM() {
  // @@protoc_insertion_point(destructor:Protocol.S_AISPAWN_RANDOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AISPAWN_RANDOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AISPAWN_RANDOM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AISPAWN_RANDOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AISPAWN_RANDOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.container_idx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.container_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AISPAWN_RANDOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 container_Idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.container_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AISPAWN_RANDOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AISPAWN_RANDOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_container_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AISPAWN_RANDOM)
  return target;
}

size_t S_AISPAWN_RANDOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AISPAWN_RANDOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_container_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AISPAWN_RANDOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AISPAWN_RANDOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AISPAWN_RANDOM::GetClassData() const { return &_class_data_; }


void S_AISPAWN_RANDOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AISPAWN_RANDOM*>(&to_msg);
  auto& from = static_cast<const S_AISPAWN_RANDOM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AISPAWN_RANDOM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_container_idx() != 0) {
    _this->_internal_set_container_idx(from._internal_container_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AISPAWN_RANDOM::CopyFrom(const S_AISPAWN_RANDOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AISPAWN_RANDOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AISPAWN_RANDOM::IsInitialized() const {
  return true;
}

void S_AISPAWN_RANDOM::InternalSwap(S_AISPAWN_RANDOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AISPAWN_RANDOM, _impl_.container_idx_)
      + sizeof(S_AISPAWN_RANDOM::_impl_.container_idx_)
      - PROTOBUF_FIELD_OFFSET(S_AISPAWN_RANDOM, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AISPAWN_RANDOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[26]);
}

// ===================================================================

class C_AISPAWN_PATROL::_Internal {
 public:
};

C_AISPAWN_PATROL::C_AISPAWN_PATROL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AISPAWN_PATROL)
}
C_AISPAWN_PATROL::C_AISPAWN_PATROL(const C_AISPAWN_PATROL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AISPAWN_PATROL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.container_idx_){}
    , decltype(_impl_.pointidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pointidx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.pointidx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AISPAWN_PATROL)
}

inline void C_AISPAWN_PATROL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.container_idx_){uint64_t{0u}}
    , decltype(_impl_.pointidx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AISPAWN_PATROL::~C_AISPAWN_PATROL() {
  // @@protoc_insertion_point(destructor:Protocol.C_AISPAWN_PATROL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AISPAWN_PATROL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AISPAWN_PATROL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AISPAWN_PATROL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AISPAWN_PATROL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pointidx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.pointidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AISPAWN_PATROL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 container_Idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.container_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pointIdx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pointidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AISPAWN_PATROL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AISPAWN_PATROL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_container_idx(), target);
  }

  // uint64 pointIdx = 3;
  if (this->_internal_pointidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pointidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AISPAWN_PATROL)
  return target;
}

size_t C_AISPAWN_PATROL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AISPAWN_PATROL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_container_idx());
  }

  // uint64 pointIdx = 3;
  if (this->_internal_pointidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pointidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AISPAWN_PATROL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AISPAWN_PATROL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AISPAWN_PATROL::GetClassData() const { return &_class_data_; }


void C_AISPAWN_PATROL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AISPAWN_PATROL*>(&to_msg);
  auto& from = static_cast<const C_AISPAWN_PATROL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AISPAWN_PATROL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_container_idx() != 0) {
    _this->_internal_set_container_idx(from._internal_container_idx());
  }
  if (from._internal_pointidx() != 0) {
    _this->_internal_set_pointidx(from._internal_pointidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AISPAWN_PATROL::CopyFrom(const C_AISPAWN_PATROL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AISPAWN_PATROL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AISPAWN_PATROL::IsInitialized() const {
  return true;
}

void C_AISPAWN_PATROL::InternalSwap(C_AISPAWN_PATROL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_AISPAWN_PATROL, _impl_.pointidx_)
      + sizeof(C_AISPAWN_PATROL::_impl_.pointidx_)
      - PROTOBUF_FIELD_OFFSET(C_AISPAWN_PATROL, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AISPAWN_PATROL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[27]);
}

// ===================================================================

class S_AISPAWN_PATROL::_Internal {
 public:
};

S_AISPAWN_PATROL::S_AISPAWN_PATROL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AISPAWN_PATROL)
}
S_AISPAWN_PATROL::S_AISPAWN_PATROL(const S_AISPAWN_PATROL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AISPAWN_PATROL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.container_idx_){}
    , decltype(_impl_.pointidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pointidx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.pointidx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AISPAWN_PATROL)
}

inline void S_AISPAWN_PATROL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.container_idx_){uint64_t{0u}}
    , decltype(_impl_.pointidx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AISPAWN_PATROL::~S_AISPAWN_PATROL() {
  // @@protoc_insertion_point(destructor:Protocol.S_AISPAWN_PATROL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AISPAWN_PATROL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AISPAWN_PATROL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AISPAWN_PATROL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AISPAWN_PATROL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pointidx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.pointidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AISPAWN_PATROL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 container_Idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.container_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pointIdx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pointidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AISPAWN_PATROL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AISPAWN_PATROL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_container_idx(), target);
  }

  // uint64 pointIdx = 3;
  if (this->_internal_pointidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pointidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AISPAWN_PATROL)
  return target;
}

size_t S_AISPAWN_PATROL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AISPAWN_PATROL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_container_idx());
  }

  // uint64 pointIdx = 3;
  if (this->_internal_pointidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pointidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AISPAWN_PATROL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AISPAWN_PATROL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AISPAWN_PATROL::GetClassData() const { return &_class_data_; }


void S_AISPAWN_PATROL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AISPAWN_PATROL*>(&to_msg);
  auto& from = static_cast<const S_AISPAWN_PATROL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AISPAWN_PATROL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_container_idx() != 0) {
    _this->_internal_set_container_idx(from._internal_container_idx());
  }
  if (from._internal_pointidx() != 0) {
    _this->_internal_set_pointidx(from._internal_pointidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AISPAWN_PATROL::CopyFrom(const S_AISPAWN_PATROL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AISPAWN_PATROL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AISPAWN_PATROL::IsInitialized() const {
  return true;
}

void S_AISPAWN_PATROL::InternalSwap(S_AISPAWN_PATROL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AISPAWN_PATROL, _impl_.pointidx_)
      + sizeof(S_AISPAWN_PATROL::_impl_.pointidx_)
      - PROTOBUF_FIELD_OFFSET(S_AISPAWN_PATROL, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AISPAWN_PATROL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[28]);
}

// ===================================================================

class C_AISPAWN_BOSS::_Internal {
 public:
};

C_AISPAWN_BOSS::C_AISPAWN_BOSS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AISPAWN_BOSS)
}
C_AISPAWN_BOSS::C_AISPAWN_BOSS(const C_AISPAWN_BOSS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AISPAWN_BOSS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.container_idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.container_idx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.container_idx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AISPAWN_BOSS)
}

inline void C_AISPAWN_BOSS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.container_idx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AISPAWN_BOSS::~C_AISPAWN_BOSS() {
  // @@protoc_insertion_point(destructor:Protocol.C_AISPAWN_BOSS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AISPAWN_BOSS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AISPAWN_BOSS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AISPAWN_BOSS::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AISPAWN_BOSS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.container_idx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.container_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AISPAWN_BOSS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 container_Idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.container_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AISPAWN_BOSS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AISPAWN_BOSS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_container_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AISPAWN_BOSS)
  return target;
}

size_t C_AISPAWN_BOSS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AISPAWN_BOSS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_container_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AISPAWN_BOSS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AISPAWN_BOSS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AISPAWN_BOSS::GetClassData() const { return &_class_data_; }


void C_AISPAWN_BOSS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AISPAWN_BOSS*>(&to_msg);
  auto& from = static_cast<const C_AISPAWN_BOSS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AISPAWN_BOSS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_container_idx() != 0) {
    _this->_internal_set_container_idx(from._internal_container_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AISPAWN_BOSS::CopyFrom(const C_AISPAWN_BOSS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AISPAWN_BOSS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AISPAWN_BOSS::IsInitialized() const {
  return true;
}

void C_AISPAWN_BOSS::InternalSwap(C_AISPAWN_BOSS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_AISPAWN_BOSS, _impl_.container_idx_)
      + sizeof(C_AISPAWN_BOSS::_impl_.container_idx_)
      - PROTOBUF_FIELD_OFFSET(C_AISPAWN_BOSS, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AISPAWN_BOSS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[29]);
}

// ===================================================================

class S_AISPAWN_BOSS::_Internal {
 public:
};

S_AISPAWN_BOSS::S_AISPAWN_BOSS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AISPAWN_BOSS)
}
S_AISPAWN_BOSS::S_AISPAWN_BOSS(const S_AISPAWN_BOSS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AISPAWN_BOSS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.container_idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.container_idx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.container_idx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AISPAWN_BOSS)
}

inline void S_AISPAWN_BOSS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.container_idx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AISPAWN_BOSS::~S_AISPAWN_BOSS() {
  // @@protoc_insertion_point(destructor:Protocol.S_AISPAWN_BOSS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AISPAWN_BOSS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AISPAWN_BOSS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AISPAWN_BOSS::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AISPAWN_BOSS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.container_idx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.container_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AISPAWN_BOSS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 container_Idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.container_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AISPAWN_BOSS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AISPAWN_BOSS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_container_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AISPAWN_BOSS)
  return target;
}

size_t S_AISPAWN_BOSS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AISPAWN_BOSS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 container_Idx = 2;
  if (this->_internal_container_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_container_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AISPAWN_BOSS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AISPAWN_BOSS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AISPAWN_BOSS::GetClassData() const { return &_class_data_; }


void S_AISPAWN_BOSS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AISPAWN_BOSS*>(&to_msg);
  auto& from = static_cast<const S_AISPAWN_BOSS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AISPAWN_BOSS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_container_idx() != 0) {
    _this->_internal_set_container_idx(from._internal_container_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AISPAWN_BOSS::CopyFrom(const S_AISPAWN_BOSS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AISPAWN_BOSS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AISPAWN_BOSS::IsInitialized() const {
  return true;
}

void S_AISPAWN_BOSS::InternalSwap(S_AISPAWN_BOSS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AISPAWN_BOSS, _impl_.container_idx_)
      + sizeof(S_AISPAWN_BOSS::_impl_.container_idx_)
      - PROTOBUF_FIELD_OFFSET(S_AISPAWN_BOSS, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AISPAWN_BOSS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[30]);
}

// ===================================================================

class S_AIMOVE::_Internal {
 public:
  static const ::Protocol::PosInfo& info(const S_AIMOVE* msg);
};

const ::Protocol::PosInfo&
S_AIMOVE::_Internal::info(const S_AIMOVE* msg) {
  return *msg->_impl_.info_;
}
void S_AIMOVE::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
S_AIMOVE::S_AIMOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AIMOVE)
}
S_AIMOVE::S_AIMOVE(const S_AIMOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AIMOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::PosInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AIMOVE)
}

inline void S_AIMOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AIMOVE::~S_AIMOVE() {
  // @@protoc_insertion_point(destructor:Protocol.S_AIMOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AIMOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void S_AIMOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AIMOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AIMOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AIMOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PosInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AIMOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AIMOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AIMOVE)
  return target;
}

size_t S_AIMOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AIMOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AIMOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AIMOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AIMOVE::GetClassData() const { return &_class_data_; }


void S_AIMOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AIMOVE*>(&to_msg);
  auto& from = static_cast<const S_AIMOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AIMOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AIMOVE::CopyFrom(const S_AIMOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AIMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AIMOVE::IsInitialized() const {
  return true;
}

void S_AIMOVE::InternalSwap(S_AIMOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AIMOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[31]);
}

// ===================================================================

class C_AIMOVE::_Internal {
 public:
  static const ::Protocol::PosInfo& info(const C_AIMOVE* msg);
};

const ::Protocol::PosInfo&
C_AIMOVE::_Internal::info(const C_AIMOVE* msg) {
  return *msg->_impl_.info_;
}
void C_AIMOVE::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
C_AIMOVE::C_AIMOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AIMOVE)
}
C_AIMOVE::C_AIMOVE(const C_AIMOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AIMOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::PosInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AIMOVE)
}

inline void C_AIMOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AIMOVE::~C_AIMOVE() {
  // @@protoc_insertion_point(destructor:Protocol.C_AIMOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AIMOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void C_AIMOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AIMOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AIMOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AIMOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PosInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AIMOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AIMOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AIMOVE)
  return target;
}

size_t C_AIMOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AIMOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AIMOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AIMOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AIMOVE::GetClassData() const { return &_class_data_; }


void C_AIMOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AIMOVE*>(&to_msg);
  auto& from = static_cast<const C_AIMOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AIMOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AIMOVE::CopyFrom(const C_AIMOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AIMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AIMOVE::IsInitialized() const {
  return true;
}

void C_AIMOVE::InternalSwap(C_AIMOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AIMOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[32]);
}

// ===================================================================

class S_AIMOVESTOP::_Internal {
 public:
};

S_AIMOVESTOP::S_AIMOVESTOP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AIMOVESTOP)
}
S_AIMOVESTOP::S_AIMOVESTOP(const S_AIMOVESTOP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AIMOVESTOP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.speed_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AIMOVESTOP)
}

inline void S_AIMOVESTOP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AIMOVESTOP::~S_AIMOVESTOP() {
  // @@protoc_insertion_point(destructor:Protocol.S_AIMOVESTOP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AIMOVESTOP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AIMOVESTOP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AIMOVESTOP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AIMOVESTOP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.speed_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AIMOVESTOP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AIMOVESTOP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AIMOVESTOP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float speed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AIMOVESTOP)
  return target;
}

size_t S_AIMOVESTOP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AIMOVESTOP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float speed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AIMOVESTOP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AIMOVESTOP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AIMOVESTOP::GetClassData() const { return &_class_data_; }


void S_AIMOVESTOP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AIMOVESTOP*>(&to_msg);
  auto& from = static_cast<const S_AIMOVESTOP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AIMOVESTOP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AIMOVESTOP::CopyFrom(const S_AIMOVESTOP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AIMOVESTOP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AIMOVESTOP::IsInitialized() const {
  return true;
}

void S_AIMOVESTOP::InternalSwap(S_AIMOVESTOP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AIMOVESTOP, _impl_.speed_)
      + sizeof(S_AIMOVESTOP::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(S_AIMOVESTOP, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AIMOVESTOP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[33]);
}

// ===================================================================

class C_AIMOVESTOP::_Internal {
 public:
};

C_AIMOVESTOP::C_AIMOVESTOP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AIMOVESTOP)
}
C_AIMOVESTOP::C_AIMOVESTOP(const C_AIMOVESTOP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AIMOVESTOP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.speed_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AIMOVESTOP)
}

inline void C_AIMOVESTOP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AIMOVESTOP::~C_AIMOVESTOP() {
  // @@protoc_insertion_point(destructor:Protocol.C_AIMOVESTOP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AIMOVESTOP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AIMOVESTOP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AIMOVESTOP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AIMOVESTOP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.speed_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AIMOVESTOP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AIMOVESTOP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AIMOVESTOP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float speed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AIMOVESTOP)
  return target;
}

size_t C_AIMOVESTOP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AIMOVESTOP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float speed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AIMOVESTOP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AIMOVESTOP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AIMOVESTOP::GetClassData() const { return &_class_data_; }


void C_AIMOVESTOP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AIMOVESTOP*>(&to_msg);
  auto& from = static_cast<const C_AIMOVESTOP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AIMOVESTOP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AIMOVESTOP::CopyFrom(const C_AIMOVESTOP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AIMOVESTOP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AIMOVESTOP::IsInitialized() const {
  return true;
}

void C_AIMOVESTOP::InternalSwap(C_AIMOVESTOP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_AIMOVESTOP, _impl_.speed_)
      + sizeof(C_AIMOVESTOP::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(C_AIMOVESTOP, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AIMOVESTOP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[34]);
}

// ===================================================================

class S_AIATTACK::_Internal {
 public:
};

S_AIATTACK::S_AIATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AIATTACK)
}
S_AIATTACK::S_AIATTACK(const S_AIATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AIATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.attack_idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attack_idx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attack_idx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AIATTACK)
}

inline void S_AIATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.attack_idx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AIATTACK::~S_AIATTACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_AIATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AIATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AIATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AIATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AIATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attack_idx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attack_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AIATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 attack_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.attack_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AIATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AIATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 attack_idx = 2;
  if (this->_internal_attack_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_attack_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AIATTACK)
  return target;
}

size_t S_AIATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AIATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 attack_idx = 2;
  if (this->_internal_attack_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_attack_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AIATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AIATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AIATTACK::GetClassData() const { return &_class_data_; }


void S_AIATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AIATTACK*>(&to_msg);
  auto& from = static_cast<const S_AIATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AIATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_attack_idx() != 0) {
    _this->_internal_set_attack_idx(from._internal_attack_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AIATTACK::CopyFrom(const S_AIATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AIATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AIATTACK::IsInitialized() const {
  return true;
}

void S_AIATTACK::InternalSwap(S_AIATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AIATTACK, _impl_.attack_idx_)
      + sizeof(S_AIATTACK::_impl_.attack_idx_)
      - PROTOBUF_FIELD_OFFSET(S_AIATTACK, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AIATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[35]);
}

// ===================================================================

class C_AIATTACK::_Internal {
 public:
};

C_AIATTACK::C_AIATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AIATTACK)
}
C_AIATTACK::C_AIATTACK(const C_AIATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AIATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.attack_idx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attack_idx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attack_idx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AIATTACK)
}

inline void C_AIATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.attack_idx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AIATTACK::~C_AIATTACK() {
  // @@protoc_insertion_point(destructor:Protocol.C_AIATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AIATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AIATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AIATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AIATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attack_idx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attack_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AIATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 attack_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.attack_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AIATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AIATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 attack_idx = 2;
  if (this->_internal_attack_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_attack_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AIATTACK)
  return target;
}

size_t C_AIATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AIATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 attack_idx = 2;
  if (this->_internal_attack_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_attack_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AIATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AIATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AIATTACK::GetClassData() const { return &_class_data_; }


void C_AIATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AIATTACK*>(&to_msg);
  auto& from = static_cast<const C_AIATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AIATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_attack_idx() != 0) {
    _this->_internal_set_attack_idx(from._internal_attack_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AIATTACK::CopyFrom(const C_AIATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AIATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AIATTACK::IsInitialized() const {
  return true;
}

void C_AIATTACK::InternalSwap(C_AIATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_AIATTACK, _impl_.attack_idx_)
      + sizeof(C_AIATTACK::_impl_.attack_idx_)
      - PROTOBUF_FIELD_OFFSET(C_AIATTACK, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AIATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[36]);
}

// ===================================================================

class S_AIATTACK_BOSS2::_Internal {
 public:
};

S_AIATTACK_BOSS2::S_AIATTACK_BOSS2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AIATTACK_BOSS2)
}
S_AIATTACK_BOSS2::S_AIATTACK_BOSS2(const S_AIATTACK_BOSS2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AIATTACK_BOSS2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_){from._impl_.target_id_}
    , /*decltype(_impl_._target_id_cached_byte_size_)*/{0}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AIATTACK_BOSS2)
}

inline void S_AIATTACK_BOSS2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_){arena}
    , /*decltype(_impl_._target_id_cached_byte_size_)*/{0}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AIATTACK_BOSS2::~S_AIATTACK_BOSS2() {
  // @@protoc_insertion_point(destructor:Protocol.S_AIATTACK_BOSS2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AIATTACK_BOSS2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_id_.~RepeatedField();
}

void S_AIATTACK_BOSS2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AIATTACK_BOSS2::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AIATTACK_BOSS2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_id_.Clear();
  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AIATTACK_BOSS2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_target_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_target_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AIATTACK_BOSS2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AIATTACK_BOSS2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // repeated uint64 target_id = 2;
  {
    int byte_size = _impl_._target_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_target_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AIATTACK_BOSS2)
  return target;
}

size_t S_AIATTACK_BOSS2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AIATTACK_BOSS2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 target_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.target_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._target_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AIATTACK_BOSS2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AIATTACK_BOSS2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AIATTACK_BOSS2::GetClassData() const { return &_class_data_; }


void S_AIATTACK_BOSS2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AIATTACK_BOSS2*>(&to_msg);
  auto& from = static_cast<const S_AIATTACK_BOSS2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AIATTACK_BOSS2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.target_id_.MergeFrom(from._impl_.target_id_);
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AIATTACK_BOSS2::CopyFrom(const S_AIATTACK_BOSS2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AIATTACK_BOSS2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AIATTACK_BOSS2::IsInitialized() const {
  return true;
}

void S_AIATTACK_BOSS2::InternalSwap(S_AIATTACK_BOSS2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.target_id_.InternalSwap(&other->_impl_.target_id_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AIATTACK_BOSS2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[37]);
}

// ===================================================================

class C_AIATTACK_BOSS2::_Internal {
 public:
};

C_AIATTACK_BOSS2::C_AIATTACK_BOSS2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AIATTACK_BOSS2)
}
C_AIATTACK_BOSS2::C_AIATTACK_BOSS2(const C_AIATTACK_BOSS2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AIATTACK_BOSS2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_){from._impl_.target_id_}
    , /*decltype(_impl_._target_id_cached_byte_size_)*/{0}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AIATTACK_BOSS2)
}

inline void C_AIATTACK_BOSS2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_){arena}
    , /*decltype(_impl_._target_id_cached_byte_size_)*/{0}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AIATTACK_BOSS2::~C_AIATTACK_BOSS2() {
  // @@protoc_insertion_point(destructor:Protocol.C_AIATTACK_BOSS2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AIATTACK_BOSS2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_id_.~RepeatedField();
}

void C_AIATTACK_BOSS2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AIATTACK_BOSS2::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AIATTACK_BOSS2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_id_.Clear();
  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AIATTACK_BOSS2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_target_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_target_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AIATTACK_BOSS2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AIATTACK_BOSS2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // repeated uint64 target_id = 2;
  {
    int byte_size = _impl_._target_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_target_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AIATTACK_BOSS2)
  return target;
}

size_t C_AIATTACK_BOSS2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AIATTACK_BOSS2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 target_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.target_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._target_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AIATTACK_BOSS2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AIATTACK_BOSS2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AIATTACK_BOSS2::GetClassData() const { return &_class_data_; }


void C_AIATTACK_BOSS2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AIATTACK_BOSS2*>(&to_msg);
  auto& from = static_cast<const C_AIATTACK_BOSS2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AIATTACK_BOSS2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.target_id_.MergeFrom(from._impl_.target_id_);
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AIATTACK_BOSS2::CopyFrom(const C_AIATTACK_BOSS2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AIATTACK_BOSS2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AIATTACK_BOSS2::IsInitialized() const {
  return true;
}

void C_AIATTACK_BOSS2::InternalSwap(C_AIATTACK_BOSS2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.target_id_.InternalSwap(&other->_impl_.target_id_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AIATTACK_BOSS2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[38]);
}

// ===================================================================

class S_AIROTATE::_Internal {
 public:
};

S_AIROTATE::S_AIROTATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AIROTATE)
}
S_AIROTATE::S_AIROTATE(const S_AIROTATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AIROTATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.roll_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AIROTATE)
}

inline void S_AIROTATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.roll_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AIROTATE::~S_AIROTATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_AIROTATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AIROTATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AIROTATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AIROTATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AIROTATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AIROTATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AIROTATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AIROTATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw(), target);
  }

  // float pitch = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pitch(), target);
  }

  // float roll = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_roll(), target);
  }

  // float x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_x(), target);
  }

  // float y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_y(), target);
  }

  // float z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AIROTATE)
  return target;
}

size_t S_AIROTATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AIROTATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float roll = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  // float x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AIROTATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AIROTATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AIROTATE::GetClassData() const { return &_class_data_; }


void S_AIROTATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AIROTATE*>(&to_msg);
  auto& from = static_cast<const S_AIROTATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AIROTATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AIROTATE::CopyFrom(const S_AIROTATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AIROTATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AIROTATE::IsInitialized() const {
  return true;
}

void S_AIROTATE::InternalSwap(S_AIROTATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AIROTATE, _impl_.z_)
      + sizeof(S_AIROTATE::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(S_AIROTATE, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AIROTATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[39]);
}

// ===================================================================

class C_AIROTATE::_Internal {
 public:
};

C_AIROTATE::C_AIROTATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AIROTATE)
}
C_AIROTATE::C_AIROTATE(const C_AIROTATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AIROTATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.roll_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AIROTATE)
}

inline void C_AIROTATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.roll_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AIROTATE::~C_AIROTATE() {
  // @@protoc_insertion_point(destructor:Protocol.C_AIROTATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AIROTATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AIROTATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AIROTATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AIROTATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AIROTATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AIROTATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AIROTATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw(), target);
  }

  // float pitch = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pitch(), target);
  }

  // float roll = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_roll(), target);
  }

  // float x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_x(), target);
  }

  // float y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_y(), target);
  }

  // float z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AIROTATE)
  return target;
}

size_t C_AIROTATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AIROTATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float roll = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  // float x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AIROTATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AIROTATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AIROTATE::GetClassData() const { return &_class_data_; }


void C_AIROTATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AIROTATE*>(&to_msg);
  auto& from = static_cast<const C_AIROTATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AIROTATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AIROTATE::CopyFrom(const C_AIROTATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AIROTATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AIROTATE::IsInitialized() const {
  return true;
}

void C_AIROTATE::InternalSwap(C_AIROTATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_AIROTATE, _impl_.z_)
      + sizeof(C_AIROTATE::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(C_AIROTATE, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AIROTATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[40]);
}

// ===================================================================

class S_AIHIT::_Internal {
 public:
};

S_AIHIT::S_AIHIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AIHIT)
}
S_AIHIT::S_AIHIT(const S_AIHIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AIHIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AIHIT)
}

inline void S_AIHIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AIHIT::~S_AIHIT() {
  // @@protoc_insertion_point(destructor:Protocol.S_AIHIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AIHIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AIHIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AIHIT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AIHIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AIHIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AIHIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AIHIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AIHIT)
  return target;
}

size_t S_AIHIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AIHIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AIHIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AIHIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AIHIT::GetClassData() const { return &_class_data_; }


void S_AIHIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AIHIT*>(&to_msg);
  auto& from = static_cast<const S_AIHIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AIHIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AIHIT::CopyFrom(const S_AIHIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AIHIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AIHIT::IsInitialized() const {
  return true;
}

void S_AIHIT::InternalSwap(S_AIHIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AIHIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[41]);
}

// ===================================================================

class C_AIHIT::_Internal {
 public:
};

C_AIHIT::C_AIHIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AIHIT)
}
C_AIHIT::C_AIHIT(const C_AIHIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AIHIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AIHIT)
}

inline void C_AIHIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AIHIT::~C_AIHIT() {
  // @@protoc_insertion_point(destructor:Protocol.C_AIHIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AIHIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AIHIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AIHIT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AIHIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AIHIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AIHIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AIHIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AIHIT)
  return target;
}

size_t C_AIHIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AIHIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AIHIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AIHIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AIHIT::GetClassData() const { return &_class_data_; }


void C_AIHIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AIHIT*>(&to_msg);
  auto& from = static_cast<const C_AIHIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AIHIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AIHIT::CopyFrom(const C_AIHIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AIHIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AIHIT::IsInitialized() const {
  return true;
}

void C_AIHIT::InternalSwap(C_AIHIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AIHIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[42]);
}

// ===================================================================

class S_DAMAGED::_Internal {
 public:
};

S_DAMAGED::S_DAMAGED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DAMAGED)
}
S_DAMAGED::S_DAMAGED(const S_DAMAGED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_DAMAGED* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.guardpoint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guardpoint_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.guardpoint_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DAMAGED)
}

inline void S_DAMAGED::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.guardpoint_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_DAMAGED::~S_DAMAGED() {
  // @@protoc_insertion_point(destructor:Protocol.S_DAMAGED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DAMAGED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DAMAGED::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_DAMAGED::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DAMAGED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.guardpoint_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.guardpoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DAMAGED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float guardPoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.guardpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DAMAGED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DAMAGED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_hp(), target);
  }

  // float guardPoint = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_guardpoint = this->_internal_guardpoint();
  uint32_t raw_guardpoint;
  memcpy(&raw_guardpoint, &tmp_guardpoint, sizeof(tmp_guardpoint));
  if (raw_guardpoint != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_guardpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DAMAGED)
  return target;
}

size_t S_DAMAGED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DAMAGED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  // float guardPoint = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_guardpoint = this->_internal_guardpoint();
  uint32_t raw_guardpoint;
  memcpy(&raw_guardpoint, &tmp_guardpoint, sizeof(tmp_guardpoint));
  if (raw_guardpoint != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DAMAGED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_DAMAGED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DAMAGED::GetClassData() const { return &_class_data_; }


void S_DAMAGED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_DAMAGED*>(&to_msg);
  auto& from = static_cast<const S_DAMAGED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DAMAGED)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_guardpoint = from._internal_guardpoint();
  uint32_t raw_guardpoint;
  memcpy(&raw_guardpoint, &tmp_guardpoint, sizeof(tmp_guardpoint));
  if (raw_guardpoint != 0) {
    _this->_internal_set_guardpoint(from._internal_guardpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DAMAGED::CopyFrom(const S_DAMAGED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DAMAGED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DAMAGED::IsInitialized() const {
  return true;
}

void S_DAMAGED::InternalSwap(S_DAMAGED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_DAMAGED, _impl_.guardpoint_)
      + sizeof(S_DAMAGED::_impl_.guardpoint_)
      - PROTOBUF_FIELD_OFFSET(S_DAMAGED, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DAMAGED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[43]);
}

// ===================================================================

class C_DAMAGED::_Internal {
 public:
};

C_DAMAGED::C_DAMAGED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DAMAGED)
}
C_DAMAGED::C_DAMAGED(const C_DAMAGED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_DAMAGED* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.guardpoint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guardpoint_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.guardpoint_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DAMAGED)
}

inline void C_DAMAGED::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.guardpoint_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_DAMAGED::~C_DAMAGED() {
  // @@protoc_insertion_point(destructor:Protocol.C_DAMAGED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DAMAGED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_DAMAGED::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_DAMAGED::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DAMAGED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.guardpoint_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.guardpoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DAMAGED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float guardPoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.guardpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DAMAGED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DAMAGED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_hp(), target);
  }

  // float guardPoint = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_guardpoint = this->_internal_guardpoint();
  uint32_t raw_guardpoint;
  memcpy(&raw_guardpoint, &tmp_guardpoint, sizeof(tmp_guardpoint));
  if (raw_guardpoint != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_guardpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DAMAGED)
  return target;
}

size_t C_DAMAGED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DAMAGED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  // float guardPoint = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_guardpoint = this->_internal_guardpoint();
  uint32_t raw_guardpoint;
  memcpy(&raw_guardpoint, &tmp_guardpoint, sizeof(tmp_guardpoint));
  if (raw_guardpoint != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DAMAGED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_DAMAGED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DAMAGED::GetClassData() const { return &_class_data_; }


void C_DAMAGED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_DAMAGED*>(&to_msg);
  auto& from = static_cast<const C_DAMAGED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DAMAGED)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_guardpoint = from._internal_guardpoint();
  uint32_t raw_guardpoint;
  memcpy(&raw_guardpoint, &tmp_guardpoint, sizeof(tmp_guardpoint));
  if (raw_guardpoint != 0) {
    _this->_internal_set_guardpoint(from._internal_guardpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DAMAGED::CopyFrom(const C_DAMAGED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DAMAGED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DAMAGED::IsInitialized() const {
  return true;
}

void C_DAMAGED::InternalSwap(C_DAMAGED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_DAMAGED, _impl_.guardpoint_)
      + sizeof(C_DAMAGED::_impl_.guardpoint_)
      - PROTOBUF_FIELD_OFFSET(C_DAMAGED, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DAMAGED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[44]);
}

// ===================================================================

class S_AIDAMAGED::_Internal {
 public:
};

S_AIDAMAGED::S_AIDAMAGED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AIDAMAGED)
}
S_AIDAMAGED::S_AIDAMAGED(const S_AIDAMAGED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AIDAMAGED* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AIDAMAGED)
}

inline void S_AIDAMAGED::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AIDAMAGED::~S_AIDAMAGED() {
  // @@protoc_insertion_point(destructor:Protocol.S_AIDAMAGED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AIDAMAGED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AIDAMAGED::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AIDAMAGED::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AIDAMAGED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AIDAMAGED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AIDAMAGED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AIDAMAGED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AIDAMAGED)
  return target;
}

size_t S_AIDAMAGED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AIDAMAGED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AIDAMAGED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AIDAMAGED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AIDAMAGED::GetClassData() const { return &_class_data_; }


void S_AIDAMAGED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AIDAMAGED*>(&to_msg);
  auto& from = static_cast<const S_AIDAMAGED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AIDAMAGED)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AIDAMAGED::CopyFrom(const S_AIDAMAGED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AIDAMAGED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AIDAMAGED::IsInitialized() const {
  return true;
}

void S_AIDAMAGED::InternalSwap(S_AIDAMAGED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AIDAMAGED, _impl_.hp_)
      + sizeof(S_AIDAMAGED::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(S_AIDAMAGED, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AIDAMAGED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[45]);
}

// ===================================================================

class C_AIDAMAGED::_Internal {
 public:
};

C_AIDAMAGED::C_AIDAMAGED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AIDAMAGED)
}
C_AIDAMAGED::C_AIDAMAGED(const C_AIDAMAGED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AIDAMAGED* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AIDAMAGED)
}

inline void C_AIDAMAGED::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AIDAMAGED::~C_AIDAMAGED() {
  // @@protoc_insertion_point(destructor:Protocol.C_AIDAMAGED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AIDAMAGED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AIDAMAGED::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AIDAMAGED::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AIDAMAGED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AIDAMAGED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AIDAMAGED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AIDAMAGED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AIDAMAGED)
  return target;
}

size_t C_AIDAMAGED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AIDAMAGED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float hp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AIDAMAGED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AIDAMAGED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AIDAMAGED::GetClassData() const { return &_class_data_; }


void C_AIDAMAGED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AIDAMAGED*>(&to_msg);
  auto& from = static_cast<const C_AIDAMAGED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AIDAMAGED)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AIDAMAGED::CopyFrom(const C_AIDAMAGED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AIDAMAGED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AIDAMAGED::IsInitialized() const {
  return true;
}

void C_AIDAMAGED::InternalSwap(C_AIDAMAGED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_AIDAMAGED, _impl_.hp_)
      + sizeof(C_AIDAMAGED::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(C_AIDAMAGED, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AIDAMAGED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[46]);
}

// ===================================================================

class S_AIDEAD::_Internal {
 public:
};

S_AIDEAD::S_AIDEAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AIDEAD)
}
S_AIDEAD::S_AIDEAD(const S_AIDEAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AIDEAD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.owner_object_id_){}
    , decltype(_impl_.dead_){}
    , decltype(_impl_.exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.exp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AIDEAD)
}

inline void S_AIDEAD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.owner_object_id_){uint64_t{0u}}
    , decltype(_impl_.dead_){false}
    , decltype(_impl_.exp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AIDEAD::~S_AIDEAD() {
  // @@protoc_insertion_point(destructor:Protocol.S_AIDEAD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AIDEAD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AIDEAD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AIDEAD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AIDEAD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AIDEAD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 owner_object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.owner_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float exp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AIDEAD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AIDEAD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // bool dead = 2;
  if (this->_internal_dead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_dead(), target);
  }

  // uint64 owner_object_id = 3;
  if (this->_internal_owner_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_owner_object_id(), target);
  }

  // float exp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AIDEAD)
  return target;
}

size_t S_AIDEAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AIDEAD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 owner_object_id = 3;
  if (this->_internal_owner_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_owner_object_id());
  }

  // bool dead = 2;
  if (this->_internal_dead() != 0) {
    total_size += 1 + 1;
  }

  // float exp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AIDEAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AIDEAD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AIDEAD::GetClassData() const { return &_class_data_; }


void S_AIDEAD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AIDEAD*>(&to_msg);
  auto& from = static_cast<const S_AIDEAD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AIDEAD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_owner_object_id() != 0) {
    _this->_internal_set_owner_object_id(from._internal_owner_object_id());
  }
  if (from._internal_dead() != 0) {
    _this->_internal_set_dead(from._internal_dead());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = from._internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AIDEAD::CopyFrom(const S_AIDEAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AIDEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AIDEAD::IsInitialized() const {
  return true;
}

void S_AIDEAD::InternalSwap(S_AIDEAD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AIDEAD, _impl_.exp_)
      + sizeof(S_AIDEAD::_impl_.exp_)
      - PROTOBUF_FIELD_OFFSET(S_AIDEAD, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AIDEAD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[47]);
}

// ===================================================================

class C_AIDEAD::_Internal {
 public:
};

C_AIDEAD::C_AIDEAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AIDEAD)
}
C_AIDEAD::C_AIDEAD(const C_AIDEAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AIDEAD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.owner_object_id_){}
    , decltype(_impl_.dead_){}
    , decltype(_impl_.exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.exp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AIDEAD)
}

inline void C_AIDEAD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.owner_object_id_){uint64_t{0u}}
    , decltype(_impl_.dead_){false}
    , decltype(_impl_.exp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AIDEAD::~C_AIDEAD() {
  // @@protoc_insertion_point(destructor:Protocol.C_AIDEAD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AIDEAD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AIDEAD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AIDEAD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AIDEAD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AIDEAD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 owner_object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.owner_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float exp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AIDEAD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AIDEAD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // bool dead = 2;
  if (this->_internal_dead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_dead(), target);
  }

  // uint64 owner_object_id = 3;
  if (this->_internal_owner_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_owner_object_id(), target);
  }

  // float exp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AIDEAD)
  return target;
}

size_t C_AIDEAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AIDEAD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 owner_object_id = 3;
  if (this->_internal_owner_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_owner_object_id());
  }

  // bool dead = 2;
  if (this->_internal_dead() != 0) {
    total_size += 1 + 1;
  }

  // float exp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AIDEAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AIDEAD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AIDEAD::GetClassData() const { return &_class_data_; }


void C_AIDEAD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AIDEAD*>(&to_msg);
  auto& from = static_cast<const C_AIDEAD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AIDEAD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_owner_object_id() != 0) {
    _this->_internal_set_owner_object_id(from._internal_owner_object_id());
  }
  if (from._internal_dead() != 0) {
    _this->_internal_set_dead(from._internal_dead());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = from._internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AIDEAD::CopyFrom(const C_AIDEAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AIDEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AIDEAD::IsInitialized() const {
  return true;
}

void C_AIDEAD::InternalSwap(C_AIDEAD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_AIDEAD, _impl_.exp_)
      + sizeof(C_AIDEAD::_impl_.exp_)
      - PROTOBUF_FIELD_OFFSET(C_AIDEAD, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AIDEAD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[48]);
}

// ===================================================================

class S_PLAYERDEAD::_Internal {
 public:
};

S_PLAYERDEAD::S_PLAYERDEAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYERDEAD)
}
S_PLAYERDEAD::S_PLAYERDEAD(const S_PLAYERDEAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYERDEAD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.dead_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dead_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dead_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYERDEAD)
}

inline void S_PLAYERDEAD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.dead_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYERDEAD::~S_PLAYERDEAD() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYERDEAD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYERDEAD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PLAYERDEAD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYERDEAD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYERDEAD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dead_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dead_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYERDEAD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYERDEAD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYERDEAD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // bool dead = 2;
  if (this->_internal_dead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_dead(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYERDEAD)
  return target;
}

size_t S_PLAYERDEAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYERDEAD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // bool dead = 2;
  if (this->_internal_dead() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYERDEAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYERDEAD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYERDEAD::GetClassData() const { return &_class_data_; }


void S_PLAYERDEAD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYERDEAD*>(&to_msg);
  auto& from = static_cast<const S_PLAYERDEAD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYERDEAD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_dead() != 0) {
    _this->_internal_set_dead(from._internal_dead());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYERDEAD::CopyFrom(const S_PLAYERDEAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYERDEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYERDEAD::IsInitialized() const {
  return true;
}

void S_PLAYERDEAD::InternalSwap(S_PLAYERDEAD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYERDEAD, _impl_.dead_)
      + sizeof(S_PLAYERDEAD::_impl_.dead_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYERDEAD, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYERDEAD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[49]);
}

// ===================================================================

class C_PLAYERDEAD::_Internal {
 public:
};

C_PLAYERDEAD::C_PLAYERDEAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYERDEAD)
}
C_PLAYERDEAD::C_PLAYERDEAD(const C_PLAYERDEAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYERDEAD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.dead_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dead_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dead_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYERDEAD)
}

inline void C_PLAYERDEAD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.dead_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYERDEAD::~C_PLAYERDEAD() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYERDEAD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYERDEAD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_PLAYERDEAD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYERDEAD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYERDEAD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dead_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dead_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYERDEAD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dead = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYERDEAD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYERDEAD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // bool dead = 2;
  if (this->_internal_dead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_dead(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYERDEAD)
  return target;
}

size_t C_PLAYERDEAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYERDEAD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // bool dead = 2;
  if (this->_internal_dead() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYERDEAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYERDEAD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYERDEAD::GetClassData() const { return &_class_data_; }


void C_PLAYERDEAD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYERDEAD*>(&to_msg);
  auto& from = static_cast<const C_PLAYERDEAD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYERDEAD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_dead() != 0) {
    _this->_internal_set_dead(from._internal_dead());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYERDEAD::CopyFrom(const C_PLAYERDEAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYERDEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYERDEAD::IsInitialized() const {
  return true;
}

void C_PLAYERDEAD::InternalSwap(C_PLAYERDEAD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYERDEAD, _impl_.dead_)
      + sizeof(C_PLAYERDEAD::_impl_.dead_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYERDEAD, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYERDEAD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[50]);
}

// ===================================================================

class S_AIPROJSPAWN::_Internal {
 public:
};

S_AIPROJSPAWN::S_AIPROJSPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AIPROJSPAWN)
}
S_AIPROJSPAWN::S_AIPROJSPAWN(const S_AIPROJSPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AIPROJSPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.projidx_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.roll_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.attackdmg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attackdmg_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attackdmg_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AIPROJSPAWN)
}

inline void S_AIPROJSPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.projidx_){int64_t{0}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.roll_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.attackdmg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AIPROJSPAWN::~S_AIPROJSPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_AIPROJSPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AIPROJSPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AIPROJSPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AIPROJSPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AIPROJSPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attackdmg_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attackdmg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AIPROJSPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ProjIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.projidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attackDmg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.attackdmg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AIPROJSPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AIPROJSPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int64 ProjIdx = 2;
  if (this->_internal_projidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_projidx(), target);
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // float yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_yaw(), target);
  }

  // float pitch = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_pitch(), target);
  }

  // float roll = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_roll(), target);
  }

  // float speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_speed(), target);
  }

  // float attackDmg = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = this->_internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_attackdmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AIPROJSPAWN)
  return target;
}

size_t S_AIPROJSPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AIPROJSPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // int64 ProjIdx = 2;
  if (this->_internal_projidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_projidx());
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float roll = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  // float speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  // float attackDmg = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = this->_internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AIPROJSPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AIPROJSPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AIPROJSPAWN::GetClassData() const { return &_class_data_; }


void S_AIPROJSPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AIPROJSPAWN*>(&to_msg);
  auto& from = static_cast<const S_AIPROJSPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AIPROJSPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_projidx() != 0) {
    _this->_internal_set_projidx(from._internal_projidx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = from._internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    _this->_internal_set_attackdmg(from._internal_attackdmg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AIPROJSPAWN::CopyFrom(const S_AIPROJSPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AIPROJSPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AIPROJSPAWN::IsInitialized() const {
  return true;
}

void S_AIPROJSPAWN::InternalSwap(S_AIPROJSPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AIPROJSPAWN, _impl_.attackdmg_)
      + sizeof(S_AIPROJSPAWN::_impl_.attackdmg_)
      - PROTOBUF_FIELD_OFFSET(S_AIPROJSPAWN, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AIPROJSPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[51]);
}

// ===================================================================

class C_AIPROJSPAWN::_Internal {
 public:
};

C_AIPROJSPAWN::C_AIPROJSPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AIPROJSPAWN)
}
C_AIPROJSPAWN::C_AIPROJSPAWN(const C_AIPROJSPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AIPROJSPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.projidx_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.roll_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.attackdmg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attackdmg_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attackdmg_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AIPROJSPAWN)
}

inline void C_AIPROJSPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.projidx_){int64_t{0}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.roll_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.attackdmg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AIPROJSPAWN::~C_AIPROJSPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.C_AIPROJSPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AIPROJSPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AIPROJSPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AIPROJSPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AIPROJSPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attackdmg_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attackdmg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AIPROJSPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ProjIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.projidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attackDmg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.attackdmg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AIPROJSPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AIPROJSPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int64 ProjIdx = 2;
  if (this->_internal_projidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_projidx(), target);
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // float yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_yaw(), target);
  }

  // float pitch = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_pitch(), target);
  }

  // float roll = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_roll(), target);
  }

  // float speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_speed(), target);
  }

  // float attackDmg = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = this->_internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_attackdmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AIPROJSPAWN)
  return target;
}

size_t C_AIPROJSPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AIPROJSPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // int64 ProjIdx = 2;
  if (this->_internal_projidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_projidx());
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float roll = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  // float speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  // float attackDmg = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = this->_internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AIPROJSPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AIPROJSPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AIPROJSPAWN::GetClassData() const { return &_class_data_; }


void C_AIPROJSPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AIPROJSPAWN*>(&to_msg);
  auto& from = static_cast<const C_AIPROJSPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AIPROJSPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_projidx() != 0) {
    _this->_internal_set_projidx(from._internal_projidx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = from._internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    _this->_internal_set_attackdmg(from._internal_attackdmg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AIPROJSPAWN::CopyFrom(const C_AIPROJSPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AIPROJSPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AIPROJSPAWN::IsInitialized() const {
  return true;
}

void C_AIPROJSPAWN::InternalSwap(C_AIPROJSPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_AIPROJSPAWN, _impl_.attackdmg_)
      + sizeof(C_AIPROJSPAWN::_impl_.attackdmg_)
      - PROTOBUF_FIELD_OFFSET(C_AIPROJSPAWN, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AIPROJSPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[52]);
}

// ===================================================================

class S_AI_KNOCKS_BACK::_Internal {
 public:
};

S_AI_KNOCKS_BACK::S_AI_KNOCKS_BACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_AI_KNOCKS_BACK)
}
S_AI_KNOCKS_BACK::S_AI_KNOCKS_BACK(const S_AI_KNOCKS_BACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_AI_KNOCKS_BACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.vx_){}
    , decltype(_impl_.vy_){}
    , decltype(_impl_.vz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vz_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.vz_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_AI_KNOCKS_BACK)
}

inline void S_AI_KNOCKS_BACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.target_id_){uint64_t{0u}}
    , decltype(_impl_.vx_){0}
    , decltype(_impl_.vy_){0}
    , decltype(_impl_.vz_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_AI_KNOCKS_BACK::~S_AI_KNOCKS_BACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_AI_KNOCKS_BACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_AI_KNOCKS_BACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_AI_KNOCKS_BACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_AI_KNOCKS_BACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_AI_KNOCKS_BACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vz_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.vz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AI_KNOCKS_BACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float vx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vz = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.vz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_AI_KNOCKS_BACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_AI_KNOCKS_BACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 target_id = 2;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  // float vx = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_vx(), target);
  }

  // float vy = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_vy(), target);
  }

  // float vz = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = this->_internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_vz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_AI_KNOCKS_BACK)
  return target;
}

size_t S_AI_KNOCKS_BACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_AI_KNOCKS_BACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 target_id = 2;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_target_id());
  }

  // float vx = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    total_size += 1 + 4;
  }

  // float vy = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    total_size += 1 + 4;
  }

  // float vz = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = this->_internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_AI_KNOCKS_BACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_AI_KNOCKS_BACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_AI_KNOCKS_BACK::GetClassData() const { return &_class_data_; }


void S_AI_KNOCKS_BACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_AI_KNOCKS_BACK*>(&to_msg);
  auto& from = static_cast<const S_AI_KNOCKS_BACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_AI_KNOCKS_BACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = from._internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    _this->_internal_set_vx(from._internal_vx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = from._internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    _this->_internal_set_vy(from._internal_vy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = from._internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    _this->_internal_set_vz(from._internal_vz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_AI_KNOCKS_BACK::CopyFrom(const S_AI_KNOCKS_BACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_AI_KNOCKS_BACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AI_KNOCKS_BACK::IsInitialized() const {
  return true;
}

void S_AI_KNOCKS_BACK::InternalSwap(S_AI_KNOCKS_BACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AI_KNOCKS_BACK, _impl_.vz_)
      + sizeof(S_AI_KNOCKS_BACK::_impl_.vz_)
      - PROTOBUF_FIELD_OFFSET(S_AI_KNOCKS_BACK, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AI_KNOCKS_BACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[53]);
}

// ===================================================================

class C_AI_KNOCKS_BACK::_Internal {
 public:
};

C_AI_KNOCKS_BACK::C_AI_KNOCKS_BACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_AI_KNOCKS_BACK)
}
C_AI_KNOCKS_BACK::C_AI_KNOCKS_BACK(const C_AI_KNOCKS_BACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_AI_KNOCKS_BACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.vx_){}
    , decltype(_impl_.vy_){}
    , decltype(_impl_.vz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vz_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.vz_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_AI_KNOCKS_BACK)
}

inline void C_AI_KNOCKS_BACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.target_id_){uint64_t{0u}}
    , decltype(_impl_.vx_){0}
    , decltype(_impl_.vy_){0}
    , decltype(_impl_.vz_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_AI_KNOCKS_BACK::~C_AI_KNOCKS_BACK() {
  // @@protoc_insertion_point(destructor:Protocol.C_AI_KNOCKS_BACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_AI_KNOCKS_BACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_AI_KNOCKS_BACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_AI_KNOCKS_BACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_AI_KNOCKS_BACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vz_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.vz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_AI_KNOCKS_BACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float vx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vz = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.vz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_AI_KNOCKS_BACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_AI_KNOCKS_BACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 target_id = 2;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  // float vx = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_vx(), target);
  }

  // float vy = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_vy(), target);
  }

  // float vz = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = this->_internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_vz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_AI_KNOCKS_BACK)
  return target;
}

size_t C_AI_KNOCKS_BACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_AI_KNOCKS_BACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 target_id = 2;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_target_id());
  }

  // float vx = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    total_size += 1 + 4;
  }

  // float vy = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    total_size += 1 + 4;
  }

  // float vz = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = this->_internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_AI_KNOCKS_BACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_AI_KNOCKS_BACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_AI_KNOCKS_BACK::GetClassData() const { return &_class_data_; }


void C_AI_KNOCKS_BACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_AI_KNOCKS_BACK*>(&to_msg);
  auto& from = static_cast<const C_AI_KNOCKS_BACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_AI_KNOCKS_BACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = from._internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    _this->_internal_set_vx(from._internal_vx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = from._internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    _this->_internal_set_vy(from._internal_vy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vz = from._internal_vz();
  uint32_t raw_vz;
  memcpy(&raw_vz, &tmp_vz, sizeof(tmp_vz));
  if (raw_vz != 0) {
    _this->_internal_set_vz(from._internal_vz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_AI_KNOCKS_BACK::CopyFrom(const C_AI_KNOCKS_BACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_AI_KNOCKS_BACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_AI_KNOCKS_BACK::IsInitialized() const {
  return true;
}

void C_AI_KNOCKS_BACK::InternalSwap(C_AI_KNOCKS_BACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_AI_KNOCKS_BACK, _impl_.vz_)
      + sizeof(C_AI_KNOCKS_BACK::_impl_.vz_)
      - PROTOBUF_FIELD_OFFSET(C_AI_KNOCKS_BACK, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_AI_KNOCKS_BACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[54]);
}

// ===================================================================

class S_PLAYERSKILL_BOMB::_Internal {
 public:
};

S_PLAYERSKILL_BOMB::S_PLAYERSKILL_BOMB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYERSKILL_BOMB)
}
S_PLAYERSKILL_BOMB::S_PLAYERSKILL_BOMB(const S_PLAYERSKILL_BOMB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYERSKILL_BOMB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.abilityarrayidx_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.dmg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dmg_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYERSKILL_BOMB)
}

inline void S_PLAYERSKILL_BOMB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.abilityarrayidx_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.dmg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYERSKILL_BOMB::~S_PLAYERSKILL_BOMB() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYERSKILL_BOMB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYERSKILL_BOMB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PLAYERSKILL_BOMB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYERSKILL_BOMB::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYERSKILL_BOMB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dmg_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYERSKILL_BOMB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 abilityArrayIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.abilityarrayidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dmg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.dmg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYERSKILL_BOMB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYERSKILL_BOMB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_abilityarrayidx(), target);
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // float dmg = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_dmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYERSKILL_BOMB)
  return target;
}

size_t S_PLAYERSKILL_BOMB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYERSKILL_BOMB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_abilityarrayidx());
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float dmg = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYERSKILL_BOMB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYERSKILL_BOMB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYERSKILL_BOMB::GetClassData() const { return &_class_data_; }


void S_PLAYERSKILL_BOMB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYERSKILL_BOMB*>(&to_msg);
  auto& from = static_cast<const S_PLAYERSKILL_BOMB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYERSKILL_BOMB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_abilityarrayidx() != 0) {
    _this->_internal_set_abilityarrayidx(from._internal_abilityarrayidx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = from._internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    _this->_internal_set_dmg(from._internal_dmg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYERSKILL_BOMB::CopyFrom(const S_PLAYERSKILL_BOMB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYERSKILL_BOMB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYERSKILL_BOMB::IsInitialized() const {
  return true;
}

void S_PLAYERSKILL_BOMB::InternalSwap(S_PLAYERSKILL_BOMB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYERSKILL_BOMB, _impl_.dmg_)
      + sizeof(S_PLAYERSKILL_BOMB::_impl_.dmg_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYERSKILL_BOMB, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYERSKILL_BOMB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[55]);
}

// ===================================================================

class C_PLAYERSKILL_BOMB::_Internal {
 public:
};

C_PLAYERSKILL_BOMB::C_PLAYERSKILL_BOMB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYERSKILL_BOMB)
}
C_PLAYERSKILL_BOMB::C_PLAYERSKILL_BOMB(const C_PLAYERSKILL_BOMB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYERSKILL_BOMB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.abilityarrayidx_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.dmg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dmg_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYERSKILL_BOMB)
}

inline void C_PLAYERSKILL_BOMB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.abilityarrayidx_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.dmg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYERSKILL_BOMB::~C_PLAYERSKILL_BOMB() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYERSKILL_BOMB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYERSKILL_BOMB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_PLAYERSKILL_BOMB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYERSKILL_BOMB::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYERSKILL_BOMB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dmg_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYERSKILL_BOMB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 abilityArrayIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.abilityarrayidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dmg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.dmg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYERSKILL_BOMB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYERSKILL_BOMB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_abilityarrayidx(), target);
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // float dmg = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_dmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYERSKILL_BOMB)
  return target;
}

size_t C_PLAYERSKILL_BOMB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYERSKILL_BOMB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_abilityarrayidx());
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float dmg = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYERSKILL_BOMB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYERSKILL_BOMB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYERSKILL_BOMB::GetClassData() const { return &_class_data_; }


void C_PLAYERSKILL_BOMB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYERSKILL_BOMB*>(&to_msg);
  auto& from = static_cast<const C_PLAYERSKILL_BOMB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYERSKILL_BOMB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_abilityarrayidx() != 0) {
    _this->_internal_set_abilityarrayidx(from._internal_abilityarrayidx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = from._internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    _this->_internal_set_dmg(from._internal_dmg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYERSKILL_BOMB::CopyFrom(const C_PLAYERSKILL_BOMB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYERSKILL_BOMB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYERSKILL_BOMB::IsInitialized() const {
  return true;
}

void C_PLAYERSKILL_BOMB::InternalSwap(C_PLAYERSKILL_BOMB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYERSKILL_BOMB, _impl_.dmg_)
      + sizeof(C_PLAYERSKILL_BOMB::_impl_.dmg_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYERSKILL_BOMB, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYERSKILL_BOMB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[56]);
}

// ===================================================================

class S_PLAYERSKILL_GRANADE::_Internal {
 public:
};

S_PLAYERSKILL_GRANADE::S_PLAYERSKILL_GRANADE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYERSKILL_GRANADE)
}
S_PLAYERSKILL_GRANADE::S_PLAYERSKILL_GRANADE(const S_PLAYERSKILL_GRANADE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYERSKILL_GRANADE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.abilityarrayidx_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.rx_){}
    , decltype(_impl_.ry_){}
    , decltype(_impl_.rz_){}
    , decltype(_impl_.dmg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dmg_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYERSKILL_GRANADE)
}

inline void S_PLAYERSKILL_GRANADE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.abilityarrayidx_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.rx_){0}
    , decltype(_impl_.ry_){0}
    , decltype(_impl_.rz_){0}
    , decltype(_impl_.dmg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYERSKILL_GRANADE::~S_PLAYERSKILL_GRANADE() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYERSKILL_GRANADE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYERSKILL_GRANADE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PLAYERSKILL_GRANADE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYERSKILL_GRANADE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYERSKILL_GRANADE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dmg_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYERSKILL_GRANADE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 abilityArrayIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.abilityarrayidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rz = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.rz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dmg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.dmg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYERSKILL_GRANADE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYERSKILL_GRANADE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_abilityarrayidx(), target);
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // float rx = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx = this->_internal_rx();
  uint32_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_rx(), target);
  }

  // float ry = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ry = this->_internal_ry();
  uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_ry(), target);
  }

  // float rz = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rz = this->_internal_rz();
  uint32_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_rz(), target);
  }

  // float dmg = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_dmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYERSKILL_GRANADE)
  return target;
}

size_t S_PLAYERSKILL_GRANADE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYERSKILL_GRANADE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_abilityarrayidx());
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float rx = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx = this->_internal_rx();
  uint32_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    total_size += 1 + 4;
  }

  // float ry = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ry = this->_internal_ry();
  uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    total_size += 1 + 4;
  }

  // float rz = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rz = this->_internal_rz();
  uint32_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    total_size += 1 + 4;
  }

  // float dmg = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYERSKILL_GRANADE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYERSKILL_GRANADE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYERSKILL_GRANADE::GetClassData() const { return &_class_data_; }


void S_PLAYERSKILL_GRANADE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYERSKILL_GRANADE*>(&to_msg);
  auto& from = static_cast<const S_PLAYERSKILL_GRANADE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYERSKILL_GRANADE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_abilityarrayidx() != 0) {
    _this->_internal_set_abilityarrayidx(from._internal_abilityarrayidx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx = from._internal_rx();
  uint32_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    _this->_internal_set_rx(from._internal_rx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ry = from._internal_ry();
  uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    _this->_internal_set_ry(from._internal_ry());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rz = from._internal_rz();
  uint32_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    _this->_internal_set_rz(from._internal_rz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = from._internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    _this->_internal_set_dmg(from._internal_dmg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYERSKILL_GRANADE::CopyFrom(const S_PLAYERSKILL_GRANADE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYERSKILL_GRANADE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYERSKILL_GRANADE::IsInitialized() const {
  return true;
}

void S_PLAYERSKILL_GRANADE::InternalSwap(S_PLAYERSKILL_GRANADE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYERSKILL_GRANADE, _impl_.dmg_)
      + sizeof(S_PLAYERSKILL_GRANADE::_impl_.dmg_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYERSKILL_GRANADE, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYERSKILL_GRANADE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[57]);
}

// ===================================================================

class C_PLAYERSKILL_GRANADE::_Internal {
 public:
};

C_PLAYERSKILL_GRANADE::C_PLAYERSKILL_GRANADE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYERSKILL_GRANADE)
}
C_PLAYERSKILL_GRANADE::C_PLAYERSKILL_GRANADE(const C_PLAYERSKILL_GRANADE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYERSKILL_GRANADE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.abilityarrayidx_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.rx_){}
    , decltype(_impl_.ry_){}
    , decltype(_impl_.rz_){}
    , decltype(_impl_.dmg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dmg_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYERSKILL_GRANADE)
}

inline void C_PLAYERSKILL_GRANADE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.abilityarrayidx_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.rx_){0}
    , decltype(_impl_.ry_){0}
    , decltype(_impl_.rz_){0}
    , decltype(_impl_.dmg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYERSKILL_GRANADE::~C_PLAYERSKILL_GRANADE() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYERSKILL_GRANADE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYERSKILL_GRANADE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_PLAYERSKILL_GRANADE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYERSKILL_GRANADE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYERSKILL_GRANADE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dmg_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYERSKILL_GRANADE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 abilityArrayIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.abilityarrayidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rz = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.rz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dmg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.dmg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYERSKILL_GRANADE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYERSKILL_GRANADE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_abilityarrayidx(), target);
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // float rx = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx = this->_internal_rx();
  uint32_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_rx(), target);
  }

  // float ry = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ry = this->_internal_ry();
  uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_ry(), target);
  }

  // float rz = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rz = this->_internal_rz();
  uint32_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_rz(), target);
  }

  // float dmg = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_dmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYERSKILL_GRANADE)
  return target;
}

size_t C_PLAYERSKILL_GRANADE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYERSKILL_GRANADE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_abilityarrayidx());
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float rx = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx = this->_internal_rx();
  uint32_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    total_size += 1 + 4;
  }

  // float ry = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ry = this->_internal_ry();
  uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    total_size += 1 + 4;
  }

  // float rz = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rz = this->_internal_rz();
  uint32_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    total_size += 1 + 4;
  }

  // float dmg = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYERSKILL_GRANADE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYERSKILL_GRANADE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYERSKILL_GRANADE::GetClassData() const { return &_class_data_; }


void C_PLAYERSKILL_GRANADE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYERSKILL_GRANADE*>(&to_msg);
  auto& from = static_cast<const C_PLAYERSKILL_GRANADE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYERSKILL_GRANADE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_abilityarrayidx() != 0) {
    _this->_internal_set_abilityarrayidx(from._internal_abilityarrayidx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rx = from._internal_rx();
  uint32_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    _this->_internal_set_rx(from._internal_rx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ry = from._internal_ry();
  uint32_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    _this->_internal_set_ry(from._internal_ry());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rz = from._internal_rz();
  uint32_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    _this->_internal_set_rz(from._internal_rz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = from._internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    _this->_internal_set_dmg(from._internal_dmg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYERSKILL_GRANADE::CopyFrom(const C_PLAYERSKILL_GRANADE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYERSKILL_GRANADE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYERSKILL_GRANADE::IsInitialized() const {
  return true;
}

void C_PLAYERSKILL_GRANADE::InternalSwap(C_PLAYERSKILL_GRANADE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYERSKILL_GRANADE, _impl_.dmg_)
      + sizeof(C_PLAYERSKILL_GRANADE::_impl_.dmg_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYERSKILL_GRANADE, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYERSKILL_GRANADE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[58]);
}

// ===================================================================

class S_PLAYERSKILL_CHEMICAL::_Internal {
 public:
};

S_PLAYERSKILL_CHEMICAL::S_PLAYERSKILL_CHEMICAL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYERSKILL_CHEMICAL)
}
S_PLAYERSKILL_CHEMICAL::S_PLAYERSKILL_CHEMICAL(const S_PLAYERSKILL_CHEMICAL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYERSKILL_CHEMICAL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.abilityarrayidx_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.dmg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dmg_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYERSKILL_CHEMICAL)
}

inline void S_PLAYERSKILL_CHEMICAL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.abilityarrayidx_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.dmg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYERSKILL_CHEMICAL::~S_PLAYERSKILL_CHEMICAL() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYERSKILL_CHEMICAL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYERSKILL_CHEMICAL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PLAYERSKILL_CHEMICAL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYERSKILL_CHEMICAL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYERSKILL_CHEMICAL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dmg_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYERSKILL_CHEMICAL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 abilityArrayIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.abilityarrayidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dmg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.dmg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYERSKILL_CHEMICAL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYERSKILL_CHEMICAL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_abilityarrayidx(), target);
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // float dmg = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_dmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYERSKILL_CHEMICAL)
  return target;
}

size_t S_PLAYERSKILL_CHEMICAL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYERSKILL_CHEMICAL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_abilityarrayidx());
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float dmg = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYERSKILL_CHEMICAL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYERSKILL_CHEMICAL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYERSKILL_CHEMICAL::GetClassData() const { return &_class_data_; }


void S_PLAYERSKILL_CHEMICAL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYERSKILL_CHEMICAL*>(&to_msg);
  auto& from = static_cast<const S_PLAYERSKILL_CHEMICAL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYERSKILL_CHEMICAL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_abilityarrayidx() != 0) {
    _this->_internal_set_abilityarrayidx(from._internal_abilityarrayidx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = from._internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    _this->_internal_set_dmg(from._internal_dmg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYERSKILL_CHEMICAL::CopyFrom(const S_PLAYERSKILL_CHEMICAL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYERSKILL_CHEMICAL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYERSKILL_CHEMICAL::IsInitialized() const {
  return true;
}

void S_PLAYERSKILL_CHEMICAL::InternalSwap(S_PLAYERSKILL_CHEMICAL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYERSKILL_CHEMICAL, _impl_.dmg_)
      + sizeof(S_PLAYERSKILL_CHEMICAL::_impl_.dmg_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYERSKILL_CHEMICAL, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYERSKILL_CHEMICAL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[59]);
}

// ===================================================================

class C_PLAYERSKILL_CHEMICAL::_Internal {
 public:
};

C_PLAYERSKILL_CHEMICAL::C_PLAYERSKILL_CHEMICAL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYERSKILL_CHEMICAL)
}
C_PLAYERSKILL_CHEMICAL::C_PLAYERSKILL_CHEMICAL(const C_PLAYERSKILL_CHEMICAL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYERSKILL_CHEMICAL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.abilityarrayidx_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.dmg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dmg_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYERSKILL_CHEMICAL)
}

inline void C_PLAYERSKILL_CHEMICAL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.abilityarrayidx_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.dmg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYERSKILL_CHEMICAL::~C_PLAYERSKILL_CHEMICAL() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYERSKILL_CHEMICAL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYERSKILL_CHEMICAL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_PLAYERSKILL_CHEMICAL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYERSKILL_CHEMICAL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYERSKILL_CHEMICAL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dmg_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.dmg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYERSKILL_CHEMICAL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 abilityArrayIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.abilityarrayidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dmg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.dmg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYERSKILL_CHEMICAL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYERSKILL_CHEMICAL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_abilityarrayidx(), target);
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // float dmg = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_dmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYERSKILL_CHEMICAL)
  return target;
}

size_t C_PLAYERSKILL_CHEMICAL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYERSKILL_CHEMICAL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_abilityarrayidx());
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float dmg = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = this->_internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYERSKILL_CHEMICAL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYERSKILL_CHEMICAL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYERSKILL_CHEMICAL::GetClassData() const { return &_class_data_; }


void C_PLAYERSKILL_CHEMICAL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYERSKILL_CHEMICAL*>(&to_msg);
  auto& from = static_cast<const C_PLAYERSKILL_CHEMICAL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYERSKILL_CHEMICAL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_abilityarrayidx() != 0) {
    _this->_internal_set_abilityarrayidx(from._internal_abilityarrayidx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dmg = from._internal_dmg();
  uint32_t raw_dmg;
  memcpy(&raw_dmg, &tmp_dmg, sizeof(tmp_dmg));
  if (raw_dmg != 0) {
    _this->_internal_set_dmg(from._internal_dmg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYERSKILL_CHEMICAL::CopyFrom(const C_PLAYERSKILL_CHEMICAL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYERSKILL_CHEMICAL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYERSKILL_CHEMICAL::IsInitialized() const {
  return true;
}

void C_PLAYERSKILL_CHEMICAL::InternalSwap(C_PLAYERSKILL_CHEMICAL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYERSKILL_CHEMICAL, _impl_.dmg_)
      + sizeof(C_PLAYERSKILL_CHEMICAL::_impl_.dmg_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYERSKILL_CHEMICAL, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYERSKILL_CHEMICAL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[60]);
}

// ===================================================================

class S_PLAYERSKILL_GUARD::_Internal {
 public:
};

S_PLAYERSKILL_GUARD::S_PLAYERSKILL_GUARD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYERSKILL_GUARD)
}
S_PLAYERSKILL_GUARD::S_PLAYERSKILL_GUARD(const S_PLAYERSKILL_GUARD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYERSKILL_GUARD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.guardpoint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guardpoint_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.guardpoint_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYERSKILL_GUARD)
}

inline void S_PLAYERSKILL_GUARD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.guardpoint_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYERSKILL_GUARD::~S_PLAYERSKILL_GUARD() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYERSKILL_GUARD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYERSKILL_GUARD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PLAYERSKILL_GUARD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYERSKILL_GUARD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYERSKILL_GUARD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.guardpoint_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.guardpoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYERSKILL_GUARD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guardPoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.guardpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYERSKILL_GUARD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYERSKILL_GUARD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 guardPoint = 2;
  if (this->_internal_guardpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guardpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYERSKILL_GUARD)
  return target;
}

size_t S_PLAYERSKILL_GUARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYERSKILL_GUARD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 guardPoint = 2;
  if (this->_internal_guardpoint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guardpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYERSKILL_GUARD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYERSKILL_GUARD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYERSKILL_GUARD::GetClassData() const { return &_class_data_; }


void S_PLAYERSKILL_GUARD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYERSKILL_GUARD*>(&to_msg);
  auto& from = static_cast<const S_PLAYERSKILL_GUARD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYERSKILL_GUARD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_guardpoint() != 0) {
    _this->_internal_set_guardpoint(from._internal_guardpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYERSKILL_GUARD::CopyFrom(const S_PLAYERSKILL_GUARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYERSKILL_GUARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYERSKILL_GUARD::IsInitialized() const {
  return true;
}

void S_PLAYERSKILL_GUARD::InternalSwap(S_PLAYERSKILL_GUARD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYERSKILL_GUARD, _impl_.guardpoint_)
      + sizeof(S_PLAYERSKILL_GUARD::_impl_.guardpoint_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYERSKILL_GUARD, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYERSKILL_GUARD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[61]);
}

// ===================================================================

class C_PLAYERSKILL_GUARD::_Internal {
 public:
};

C_PLAYERSKILL_GUARD::C_PLAYERSKILL_GUARD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYERSKILL_GUARD)
}
C_PLAYERSKILL_GUARD::C_PLAYERSKILL_GUARD(const C_PLAYERSKILL_GUARD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYERSKILL_GUARD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.guardpoint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guardpoint_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.guardpoint_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYERSKILL_GUARD)
}

inline void C_PLAYERSKILL_GUARD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.guardpoint_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYERSKILL_GUARD::~C_PLAYERSKILL_GUARD() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYERSKILL_GUARD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYERSKILL_GUARD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_PLAYERSKILL_GUARD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYERSKILL_GUARD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYERSKILL_GUARD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.guardpoint_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.guardpoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYERSKILL_GUARD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 guardPoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.guardpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYERSKILL_GUARD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYERSKILL_GUARD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 guardPoint = 2;
  if (this->_internal_guardpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guardpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYERSKILL_GUARD)
  return target;
}

size_t C_PLAYERSKILL_GUARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYERSKILL_GUARD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 guardPoint = 2;
  if (this->_internal_guardpoint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guardpoint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYERSKILL_GUARD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYERSKILL_GUARD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYERSKILL_GUARD::GetClassData() const { return &_class_data_; }


void C_PLAYERSKILL_GUARD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYERSKILL_GUARD*>(&to_msg);
  auto& from = static_cast<const C_PLAYERSKILL_GUARD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYERSKILL_GUARD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_guardpoint() != 0) {
    _this->_internal_set_guardpoint(from._internal_guardpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYERSKILL_GUARD::CopyFrom(const C_PLAYERSKILL_GUARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYERSKILL_GUARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYERSKILL_GUARD::IsInitialized() const {
  return true;
}

void C_PLAYERSKILL_GUARD::InternalSwap(C_PLAYERSKILL_GUARD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYERSKILL_GUARD, _impl_.guardpoint_)
      + sizeof(C_PLAYERSKILL_GUARD::_impl_.guardpoint_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYERSKILL_GUARD, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYERSKILL_GUARD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[62]);
}

// ===================================================================

class S_PLAYERSKILL_HEAL::_Internal {
 public:
};

S_PLAYERSKILL_HEAL::S_PLAYERSKILL_HEAL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYERSKILL_HEAL)
}
S_PLAYERSKILL_HEAL::S_PLAYERSKILL_HEAL(const S_PLAYERSKILL_HEAL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYERSKILL_HEAL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.abilityarrayidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.abilityarrayidx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.abilityarrayidx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYERSKILL_HEAL)
}

inline void S_PLAYERSKILL_HEAL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.abilityarrayidx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYERSKILL_HEAL::~S_PLAYERSKILL_HEAL() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYERSKILL_HEAL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYERSKILL_HEAL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PLAYERSKILL_HEAL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYERSKILL_HEAL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYERSKILL_HEAL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.abilityarrayidx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.abilityarrayidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYERSKILL_HEAL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 abilityArrayIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.abilityarrayidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYERSKILL_HEAL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYERSKILL_HEAL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_abilityarrayidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYERSKILL_HEAL)
  return target;
}

size_t S_PLAYERSKILL_HEAL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYERSKILL_HEAL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_abilityarrayidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYERSKILL_HEAL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYERSKILL_HEAL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYERSKILL_HEAL::GetClassData() const { return &_class_data_; }


void S_PLAYERSKILL_HEAL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYERSKILL_HEAL*>(&to_msg);
  auto& from = static_cast<const S_PLAYERSKILL_HEAL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYERSKILL_HEAL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_abilityarrayidx() != 0) {
    _this->_internal_set_abilityarrayidx(from._internal_abilityarrayidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYERSKILL_HEAL::CopyFrom(const S_PLAYERSKILL_HEAL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYERSKILL_HEAL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYERSKILL_HEAL::IsInitialized() const {
  return true;
}

void S_PLAYERSKILL_HEAL::InternalSwap(S_PLAYERSKILL_HEAL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYERSKILL_HEAL, _impl_.abilityarrayidx_)
      + sizeof(S_PLAYERSKILL_HEAL::_impl_.abilityarrayidx_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYERSKILL_HEAL, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYERSKILL_HEAL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[63]);
}

// ===================================================================

class C_PLAYERSKILL_HEAL::_Internal {
 public:
};

C_PLAYERSKILL_HEAL::C_PLAYERSKILL_HEAL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYERSKILL_HEAL)
}
C_PLAYERSKILL_HEAL::C_PLAYERSKILL_HEAL(const C_PLAYERSKILL_HEAL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYERSKILL_HEAL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.abilityarrayidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.abilityarrayidx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.abilityarrayidx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYERSKILL_HEAL)
}

inline void C_PLAYERSKILL_HEAL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.abilityarrayidx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYERSKILL_HEAL::~C_PLAYERSKILL_HEAL() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYERSKILL_HEAL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYERSKILL_HEAL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_PLAYERSKILL_HEAL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYERSKILL_HEAL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYERSKILL_HEAL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.abilityarrayidx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.abilityarrayidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYERSKILL_HEAL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 abilityArrayIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.abilityarrayidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYERSKILL_HEAL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYERSKILL_HEAL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_abilityarrayidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYERSKILL_HEAL)
  return target;
}

size_t C_PLAYERSKILL_HEAL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYERSKILL_HEAL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_abilityarrayidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYERSKILL_HEAL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYERSKILL_HEAL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYERSKILL_HEAL::GetClassData() const { return &_class_data_; }


void C_PLAYERSKILL_HEAL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYERSKILL_HEAL*>(&to_msg);
  auto& from = static_cast<const C_PLAYERSKILL_HEAL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYERSKILL_HEAL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_abilityarrayidx() != 0) {
    _this->_internal_set_abilityarrayidx(from._internal_abilityarrayidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYERSKILL_HEAL::CopyFrom(const C_PLAYERSKILL_HEAL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYERSKILL_HEAL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYERSKILL_HEAL::IsInitialized() const {
  return true;
}

void C_PLAYERSKILL_HEAL::InternalSwap(C_PLAYERSKILL_HEAL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYERSKILL_HEAL, _impl_.abilityarrayidx_)
      + sizeof(C_PLAYERSKILL_HEAL::_impl_.abilityarrayidx_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYERSKILL_HEAL, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYERSKILL_HEAL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[64]);
}

// ===================================================================

class S_PLAYERHEAL::_Internal {
 public:
};

S_PLAYERHEAL::S_PLAYERHEAL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYERHEAL)
}
S_PLAYERHEAL::S_PLAYERHEAL(const S_PLAYERHEAL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYERHEAL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.updeatedhp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.updeatedhp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.updeatedhp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYERHEAL)
}

inline void S_PLAYERHEAL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.updeatedhp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYERHEAL::~S_PLAYERHEAL() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYERHEAL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYERHEAL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PLAYERHEAL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYERHEAL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYERHEAL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.updeatedhp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.updeatedhp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYERHEAL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 updeatedHP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.updeatedhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYERHEAL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYERHEAL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 updeatedHP = 2;
  if (this->_internal_updeatedhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_updeatedhp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYERHEAL)
  return target;
}

size_t S_PLAYERHEAL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYERHEAL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 updeatedHP = 2;
  if (this->_internal_updeatedhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_updeatedhp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYERHEAL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYERHEAL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYERHEAL::GetClassData() const { return &_class_data_; }


void S_PLAYERHEAL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYERHEAL*>(&to_msg);
  auto& from = static_cast<const S_PLAYERHEAL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYERHEAL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_updeatedhp() != 0) {
    _this->_internal_set_updeatedhp(from._internal_updeatedhp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYERHEAL::CopyFrom(const S_PLAYERHEAL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYERHEAL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYERHEAL::IsInitialized() const {
  return true;
}

void S_PLAYERHEAL::InternalSwap(S_PLAYERHEAL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYERHEAL, _impl_.updeatedhp_)
      + sizeof(S_PLAYERHEAL::_impl_.updeatedhp_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYERHEAL, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYERHEAL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[65]);
}

// ===================================================================

class C_PLAYERHEAL::_Internal {
 public:
};

C_PLAYERHEAL::C_PLAYERHEAL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYERHEAL)
}
C_PLAYERHEAL::C_PLAYERHEAL(const C_PLAYERHEAL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYERHEAL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.updeatedhp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.updeatedhp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.updeatedhp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYERHEAL)
}

inline void C_PLAYERHEAL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.updeatedhp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYERHEAL::~C_PLAYERHEAL() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYERHEAL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYERHEAL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_PLAYERHEAL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYERHEAL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYERHEAL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.updeatedhp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.updeatedhp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYERHEAL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 updeatedHP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.updeatedhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYERHEAL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYERHEAL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 updeatedHP = 2;
  if (this->_internal_updeatedhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_updeatedhp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYERHEAL)
  return target;
}

size_t C_PLAYERHEAL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYERHEAL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 updeatedHP = 2;
  if (this->_internal_updeatedhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_updeatedhp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYERHEAL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYERHEAL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYERHEAL::GetClassData() const { return &_class_data_; }


void C_PLAYERHEAL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYERHEAL*>(&to_msg);
  auto& from = static_cast<const C_PLAYERHEAL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYERHEAL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_updeatedhp() != 0) {
    _this->_internal_set_updeatedhp(from._internal_updeatedhp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYERHEAL::CopyFrom(const C_PLAYERHEAL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYERHEAL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYERHEAL::IsInitialized() const {
  return true;
}

void C_PLAYERHEAL::InternalSwap(C_PLAYERHEAL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYERHEAL, _impl_.updeatedhp_)
      + sizeof(C_PLAYERHEAL::_impl_.updeatedhp_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYERHEAL, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYERHEAL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[66]);
}

// ===================================================================

class S_MAKEDRONE::_Internal {
 public:
};

S_MAKEDRONE::S_MAKEDRONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MAKEDRONE)
}
S_MAKEDRONE::S_MAKEDRONE(const S_MAKEDRONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MAKEDRONE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.abilityarrayidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.abilityarrayidx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.abilityarrayidx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MAKEDRONE)
}

inline void S_MAKEDRONE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.abilityarrayidx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_MAKEDRONE::~S_MAKEDRONE() {
  // @@protoc_insertion_point(destructor:Protocol.S_MAKEDRONE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MAKEDRONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_MAKEDRONE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MAKEDRONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MAKEDRONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.abilityarrayidx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.abilityarrayidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MAKEDRONE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 abilityArrayIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.abilityarrayidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MAKEDRONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MAKEDRONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_abilityarrayidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MAKEDRONE)
  return target;
}

size_t S_MAKEDRONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MAKEDRONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_abilityarrayidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MAKEDRONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MAKEDRONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MAKEDRONE::GetClassData() const { return &_class_data_; }


void S_MAKEDRONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MAKEDRONE*>(&to_msg);
  auto& from = static_cast<const S_MAKEDRONE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MAKEDRONE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_abilityarrayidx() != 0) {
    _this->_internal_set_abilityarrayidx(from._internal_abilityarrayidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MAKEDRONE::CopyFrom(const S_MAKEDRONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MAKEDRONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MAKEDRONE::IsInitialized() const {
  return true;
}

void S_MAKEDRONE::InternalSwap(S_MAKEDRONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MAKEDRONE, _impl_.abilityarrayidx_)
      + sizeof(S_MAKEDRONE::_impl_.abilityarrayidx_)
      - PROTOBUF_FIELD_OFFSET(S_MAKEDRONE, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MAKEDRONE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[67]);
}

// ===================================================================

class C_MAKEDRONE::_Internal {
 public:
};

C_MAKEDRONE::C_MAKEDRONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MAKEDRONE)
}
C_MAKEDRONE::C_MAKEDRONE(const C_MAKEDRONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MAKEDRONE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.abilityarrayidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.abilityarrayidx_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.abilityarrayidx_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MAKEDRONE)
}

inline void C_MAKEDRONE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.abilityarrayidx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MAKEDRONE::~C_MAKEDRONE() {
  // @@protoc_insertion_point(destructor:Protocol.C_MAKEDRONE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MAKEDRONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_MAKEDRONE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MAKEDRONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MAKEDRONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.abilityarrayidx_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.abilityarrayidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MAKEDRONE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 abilityArrayIdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.abilityarrayidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MAKEDRONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MAKEDRONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_abilityarrayidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MAKEDRONE)
  return target;
}

size_t C_MAKEDRONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MAKEDRONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 abilityArrayIdx = 2;
  if (this->_internal_abilityarrayidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_abilityarrayidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MAKEDRONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MAKEDRONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MAKEDRONE::GetClassData() const { return &_class_data_; }


void C_MAKEDRONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MAKEDRONE*>(&to_msg);
  auto& from = static_cast<const C_MAKEDRONE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MAKEDRONE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_abilityarrayidx() != 0) {
    _this->_internal_set_abilityarrayidx(from._internal_abilityarrayidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MAKEDRONE::CopyFrom(const C_MAKEDRONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MAKEDRONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MAKEDRONE::IsInitialized() const {
  return true;
}

void C_MAKEDRONE::InternalSwap(C_MAKEDRONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_MAKEDRONE, _impl_.abilityarrayidx_)
      + sizeof(C_MAKEDRONE::_impl_.abilityarrayidx_)
      - PROTOBUF_FIELD_OFFSET(C_MAKEDRONE, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MAKEDRONE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[68]);
}

// ===================================================================

class S_MOVEDRONE::_Internal {
 public:
};

S_MOVEDRONE::S_MOVEDRONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MOVEDRONE)
}
S_MOVEDRONE::S_MOVEDRONE(const S_MOVEDRONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MOVEDRONE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MOVEDRONE)
}

inline void S_MOVEDRONE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_MOVEDRONE::~S_MOVEDRONE() {
  // @@protoc_insertion_point(destructor:Protocol.S_MOVEDRONE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MOVEDRONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_MOVEDRONE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MOVEDRONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MOVEDRONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MOVEDRONE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MOVEDRONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MOVEDRONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MOVEDRONE)
  return target;
}

size_t S_MOVEDRONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MOVEDRONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MOVEDRONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MOVEDRONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MOVEDRONE::GetClassData() const { return &_class_data_; }


void S_MOVEDRONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MOVEDRONE*>(&to_msg);
  auto& from = static_cast<const S_MOVEDRONE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MOVEDRONE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MOVEDRONE::CopyFrom(const S_MOVEDRONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MOVEDRONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MOVEDRONE::IsInitialized() const {
  return true;
}

void S_MOVEDRONE::InternalSwap(S_MOVEDRONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MOVEDRONE, _impl_.z_)
      + sizeof(S_MOVEDRONE::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(S_MOVEDRONE, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MOVEDRONE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[69]);
}

// ===================================================================

class C_MOVEDRONE::_Internal {
 public:
};

C_MOVEDRONE::C_MOVEDRONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MOVEDRONE)
}
C_MOVEDRONE::C_MOVEDRONE(const C_MOVEDRONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MOVEDRONE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MOVEDRONE)
}

inline void C_MOVEDRONE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MOVEDRONE::~C_MOVEDRONE() {
  // @@protoc_insertion_point(destructor:Protocol.C_MOVEDRONE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MOVEDRONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_MOVEDRONE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MOVEDRONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MOVEDRONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MOVEDRONE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MOVEDRONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MOVEDRONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MOVEDRONE)
  return target;
}

size_t C_MOVEDRONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MOVEDRONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MOVEDRONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MOVEDRONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MOVEDRONE::GetClassData() const { return &_class_data_; }


void C_MOVEDRONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MOVEDRONE*>(&to_msg);
  auto& from = static_cast<const C_MOVEDRONE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MOVEDRONE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MOVEDRONE::CopyFrom(const C_MOVEDRONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MOVEDRONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MOVEDRONE::IsInitialized() const {
  return true;
}

void C_MOVEDRONE::InternalSwap(C_MOVEDRONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_MOVEDRONE, _impl_.z_)
      + sizeof(C_MOVEDRONE::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(C_MOVEDRONE, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MOVEDRONE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[70]);
}

// ===================================================================

class S_SEARCHDRONE::_Internal {
 public:
};

S_SEARCHDRONE::S_SEARCHDRONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SEARCHDRONE)
}
S_SEARCHDRONE::S_SEARCHDRONE(const S_SEARCHDRONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SEARCHDRONE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.roll_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roll_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.roll_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SEARCHDRONE)
}

inline void S_SEARCHDRONE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.roll_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SEARCHDRONE::~S_SEARCHDRONE() {
  // @@protoc_insertion_point(destructor:Protocol.S_SEARCHDRONE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SEARCHDRONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_SEARCHDRONE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SEARCHDRONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SEARCHDRONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.roll_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SEARCHDRONE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SEARCHDRONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SEARCHDRONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float yaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_yaw(), target);
  }

  // float pitch = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_pitch(), target);
  }

  // float roll = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SEARCHDRONE)
  return target;
}

size_t S_SEARCHDRONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SEARCHDRONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float roll = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SEARCHDRONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SEARCHDRONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SEARCHDRONE::GetClassData() const { return &_class_data_; }


void S_SEARCHDRONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SEARCHDRONE*>(&to_msg);
  auto& from = static_cast<const S_SEARCHDRONE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SEARCHDRONE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SEARCHDRONE::CopyFrom(const S_SEARCHDRONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SEARCHDRONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SEARCHDRONE::IsInitialized() const {
  return true;
}

void S_SEARCHDRONE::InternalSwap(S_SEARCHDRONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SEARCHDRONE, _impl_.roll_)
      + sizeof(S_SEARCHDRONE::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(S_SEARCHDRONE, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SEARCHDRONE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[71]);
}

// ===================================================================

class C_SEARCHDRONE::_Internal {
 public:
};

C_SEARCHDRONE::C_SEARCHDRONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SEARCHDRONE)
}
C_SEARCHDRONE::C_SEARCHDRONE(const C_SEARCHDRONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SEARCHDRONE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.roll_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roll_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.roll_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SEARCHDRONE)
}

inline void C_SEARCHDRONE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.roll_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SEARCHDRONE::~C_SEARCHDRONE() {
  // @@protoc_insertion_point(destructor:Protocol.C_SEARCHDRONE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SEARCHDRONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_SEARCHDRONE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SEARCHDRONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SEARCHDRONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.roll_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SEARCHDRONE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SEARCHDRONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SEARCHDRONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float yaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_yaw(), target);
  }

  // float pitch = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_pitch(), target);
  }

  // float roll = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SEARCHDRONE)
  return target;
}

size_t C_SEARCHDRONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SEARCHDRONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float roll = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SEARCHDRONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SEARCHDRONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SEARCHDRONE::GetClassData() const { return &_class_data_; }


void C_SEARCHDRONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SEARCHDRONE*>(&to_msg);
  auto& from = static_cast<const C_SEARCHDRONE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SEARCHDRONE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SEARCHDRONE::CopyFrom(const C_SEARCHDRONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SEARCHDRONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SEARCHDRONE::IsInitialized() const {
  return true;
}

void C_SEARCHDRONE::InternalSwap(C_SEARCHDRONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SEARCHDRONE, _impl_.roll_)
      + sizeof(C_SEARCHDRONE::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(C_SEARCHDRONE, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SEARCHDRONE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[72]);
}

// ===================================================================

class S_RETURNDRONE::_Internal {
 public:
};

S_RETURNDRONE::S_RETURNDRONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_RETURNDRONE)
}
S_RETURNDRONE::S_RETURNDRONE(const S_RETURNDRONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_RETURNDRONE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_RETURNDRONE)
}

inline void S_RETURNDRONE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_RETURNDRONE::~S_RETURNDRONE() {
  // @@protoc_insertion_point(destructor:Protocol.S_RETURNDRONE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_RETURNDRONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_RETURNDRONE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_RETURNDRONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_RETURNDRONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_RETURNDRONE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_RETURNDRONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_RETURNDRONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_RETURNDRONE)
  return target;
}

size_t S_RETURNDRONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_RETURNDRONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_RETURNDRONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_RETURNDRONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_RETURNDRONE::GetClassData() const { return &_class_data_; }


void S_RETURNDRONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_RETURNDRONE*>(&to_msg);
  auto& from = static_cast<const S_RETURNDRONE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_RETURNDRONE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_RETURNDRONE::CopyFrom(const S_RETURNDRONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_RETURNDRONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_RETURNDRONE::IsInitialized() const {
  return true;
}

void S_RETURNDRONE::InternalSwap(S_RETURNDRONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_RETURNDRONE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[73]);
}

// ===================================================================

class C_RETURNDRONE::_Internal {
 public:
};

C_RETURNDRONE::C_RETURNDRONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_RETURNDRONE)
}
C_RETURNDRONE::C_RETURNDRONE(const C_RETURNDRONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_RETURNDRONE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_RETURNDRONE)
}

inline void C_RETURNDRONE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_RETURNDRONE::~C_RETURNDRONE() {
  // @@protoc_insertion_point(destructor:Protocol.C_RETURNDRONE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_RETURNDRONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_RETURNDRONE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_RETURNDRONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_RETURNDRONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_RETURNDRONE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_RETURNDRONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_RETURNDRONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_RETURNDRONE)
  return target;
}

size_t C_RETURNDRONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_RETURNDRONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_RETURNDRONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_RETURNDRONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_RETURNDRONE::GetClassData() const { return &_class_data_; }


void C_RETURNDRONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_RETURNDRONE*>(&to_msg);
  auto& from = static_cast<const C_RETURNDRONE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_RETURNDRONE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_RETURNDRONE::CopyFrom(const C_RETURNDRONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_RETURNDRONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_RETURNDRONE::IsInitialized() const {
  return true;
}

void C_RETURNDRONE::InternalSwap(C_RETURNDRONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_RETURNDRONE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[74]);
}

// ===================================================================

class S_ATTACKDRONE::_Internal {
 public:
};

S_ATTACKDRONE::S_ATTACKDRONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ATTACKDRONE)
}
S_ATTACKDRONE::S_ATTACKDRONE(const S_ATTACKDRONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ATTACKDRONE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ATTACKDRONE)
}

inline void S_ATTACKDRONE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ATTACKDRONE::~S_ATTACKDRONE() {
  // @@protoc_insertion_point(destructor:Protocol.S_ATTACKDRONE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ATTACKDRONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ATTACKDRONE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ATTACKDRONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ATTACKDRONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ATTACKDRONE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ATTACKDRONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ATTACKDRONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ATTACKDRONE)
  return target;
}

size_t S_ATTACKDRONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ATTACKDRONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ATTACKDRONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ATTACKDRONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ATTACKDRONE::GetClassData() const { return &_class_data_; }


void S_ATTACKDRONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ATTACKDRONE*>(&to_msg);
  auto& from = static_cast<const S_ATTACKDRONE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ATTACKDRONE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ATTACKDRONE::CopyFrom(const S_ATTACKDRONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ATTACKDRONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ATTACKDRONE::IsInitialized() const {
  return true;
}

void S_ATTACKDRONE::InternalSwap(S_ATTACKDRONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ATTACKDRONE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[75]);
}

// ===================================================================

class C_ATTACKDRONE::_Internal {
 public:
};

C_ATTACKDRONE::C_ATTACKDRONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ATTACKDRONE)
}
C_ATTACKDRONE::C_ATTACKDRONE(const C_ATTACKDRONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ATTACKDRONE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ATTACKDRONE)
}

inline void C_ATTACKDRONE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_ATTACKDRONE::~C_ATTACKDRONE() {
  // @@protoc_insertion_point(destructor:Protocol.C_ATTACKDRONE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ATTACKDRONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ATTACKDRONE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ATTACKDRONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ATTACKDRONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ATTACKDRONE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ATTACKDRONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ATTACKDRONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ATTACKDRONE)
  return target;
}

size_t C_ATTACKDRONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ATTACKDRONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ATTACKDRONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ATTACKDRONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ATTACKDRONE::GetClassData() const { return &_class_data_; }


void C_ATTACKDRONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ATTACKDRONE*>(&to_msg);
  auto& from = static_cast<const C_ATTACKDRONE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ATTACKDRONE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ATTACKDRONE::CopyFrom(const C_ATTACKDRONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ATTACKDRONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ATTACKDRONE::IsInitialized() const {
  return true;
}

void C_ATTACKDRONE::InternalSwap(C_ATTACKDRONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ATTACKDRONE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[76]);
}

// ===================================================================

class S_EATITEM_MAXHPUP::_Internal {
 public:
};

S_EATITEM_MAXHPUP::S_EATITEM_MAXHPUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_EATITEM_MAXHPUP)
}
S_EATITEM_MAXHPUP::S_EATITEM_MAXHPUP(const S_EATITEM_MAXHPUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_EATITEM_MAXHPUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.maxhp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxhp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.maxhp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_EATITEM_MAXHPUP)
}

inline void S_EATITEM_MAXHPUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.maxhp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_EATITEM_MAXHPUP::~S_EATITEM_MAXHPUP() {
  // @@protoc_insertion_point(destructor:Protocol.S_EATITEM_MAXHPUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_EATITEM_MAXHPUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_EATITEM_MAXHPUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_EATITEM_MAXHPUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_EATITEM_MAXHPUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxhp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.maxhp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_EATITEM_MAXHPUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float maxHP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_EATITEM_MAXHPUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_EATITEM_MAXHPUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float maxHP = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhp = this->_internal_maxhp();
  uint32_t raw_maxhp;
  memcpy(&raw_maxhp, &tmp_maxhp, sizeof(tmp_maxhp));
  if (raw_maxhp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_maxhp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_EATITEM_MAXHPUP)
  return target;
}

size_t S_EATITEM_MAXHPUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_EATITEM_MAXHPUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float maxHP = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhp = this->_internal_maxhp();
  uint32_t raw_maxhp;
  memcpy(&raw_maxhp, &tmp_maxhp, sizeof(tmp_maxhp));
  if (raw_maxhp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_EATITEM_MAXHPUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_EATITEM_MAXHPUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_EATITEM_MAXHPUP::GetClassData() const { return &_class_data_; }


void S_EATITEM_MAXHPUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_EATITEM_MAXHPUP*>(&to_msg);
  auto& from = static_cast<const S_EATITEM_MAXHPUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_EATITEM_MAXHPUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhp = from._internal_maxhp();
  uint32_t raw_maxhp;
  memcpy(&raw_maxhp, &tmp_maxhp, sizeof(tmp_maxhp));
  if (raw_maxhp != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_EATITEM_MAXHPUP::CopyFrom(const S_EATITEM_MAXHPUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_EATITEM_MAXHPUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_EATITEM_MAXHPUP::IsInitialized() const {
  return true;
}

void S_EATITEM_MAXHPUP::InternalSwap(S_EATITEM_MAXHPUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_EATITEM_MAXHPUP, _impl_.maxhp_)
      + sizeof(S_EATITEM_MAXHPUP::_impl_.maxhp_)
      - PROTOBUF_FIELD_OFFSET(S_EATITEM_MAXHPUP, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_EATITEM_MAXHPUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[77]);
}

// ===================================================================

class C_EATITEM_MAXHPUP::_Internal {
 public:
};

C_EATITEM_MAXHPUP::C_EATITEM_MAXHPUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_EATITEM_MAXHPUP)
}
C_EATITEM_MAXHPUP::C_EATITEM_MAXHPUP(const C_EATITEM_MAXHPUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_EATITEM_MAXHPUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.maxhp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxhp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.maxhp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_EATITEM_MAXHPUP)
}

inline void C_EATITEM_MAXHPUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.maxhp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_EATITEM_MAXHPUP::~C_EATITEM_MAXHPUP() {
  // @@protoc_insertion_point(destructor:Protocol.C_EATITEM_MAXHPUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_EATITEM_MAXHPUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_EATITEM_MAXHPUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_EATITEM_MAXHPUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_EATITEM_MAXHPUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxhp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.maxhp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_EATITEM_MAXHPUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float maxHP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_EATITEM_MAXHPUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_EATITEM_MAXHPUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float maxHP = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhp = this->_internal_maxhp();
  uint32_t raw_maxhp;
  memcpy(&raw_maxhp, &tmp_maxhp, sizeof(tmp_maxhp));
  if (raw_maxhp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_maxhp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_EATITEM_MAXHPUP)
  return target;
}

size_t C_EATITEM_MAXHPUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_EATITEM_MAXHPUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float maxHP = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhp = this->_internal_maxhp();
  uint32_t raw_maxhp;
  memcpy(&raw_maxhp, &tmp_maxhp, sizeof(tmp_maxhp));
  if (raw_maxhp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_EATITEM_MAXHPUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_EATITEM_MAXHPUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_EATITEM_MAXHPUP::GetClassData() const { return &_class_data_; }


void C_EATITEM_MAXHPUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_EATITEM_MAXHPUP*>(&to_msg);
  auto& from = static_cast<const C_EATITEM_MAXHPUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_EATITEM_MAXHPUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhp = from._internal_maxhp();
  uint32_t raw_maxhp;
  memcpy(&raw_maxhp, &tmp_maxhp, sizeof(tmp_maxhp));
  if (raw_maxhp != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_EATITEM_MAXHPUP::CopyFrom(const C_EATITEM_MAXHPUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_EATITEM_MAXHPUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_EATITEM_MAXHPUP::IsInitialized() const {
  return true;
}

void C_EATITEM_MAXHPUP::InternalSwap(C_EATITEM_MAXHPUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_EATITEM_MAXHPUP, _impl_.maxhp_)
      + sizeof(C_EATITEM_MAXHPUP::_impl_.maxhp_)
      - PROTOBUF_FIELD_OFFSET(C_EATITEM_MAXHPUP, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_EATITEM_MAXHPUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[78]);
}

// ===================================================================

class S_EATITEM_LVUP::_Internal {
 public:
};

S_EATITEM_LVUP::S_EATITEM_LVUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_EATITEM_LVUP)
}
S_EATITEM_LVUP::S_EATITEM_LVUP(const S_EATITEM_LVUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_EATITEM_LVUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.curlv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.curlv_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.curlv_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_EATITEM_LVUP)
}

inline void S_EATITEM_LVUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.curlv_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_EATITEM_LVUP::~S_EATITEM_LVUP() {
  // @@protoc_insertion_point(destructor:Protocol.S_EATITEM_LVUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_EATITEM_LVUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_EATITEM_LVUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_EATITEM_LVUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_EATITEM_LVUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.curlv_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.curlv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_EATITEM_LVUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 curLV = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.curlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_EATITEM_LVUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_EATITEM_LVUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int64 curLV = 2;
  if (this->_internal_curlv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_curlv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_EATITEM_LVUP)
  return target;
}

size_t S_EATITEM_LVUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_EATITEM_LVUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // int64 curLV = 2;
  if (this->_internal_curlv() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_curlv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_EATITEM_LVUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_EATITEM_LVUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_EATITEM_LVUP::GetClassData() const { return &_class_data_; }


void S_EATITEM_LVUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_EATITEM_LVUP*>(&to_msg);
  auto& from = static_cast<const S_EATITEM_LVUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_EATITEM_LVUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_curlv() != 0) {
    _this->_internal_set_curlv(from._internal_curlv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_EATITEM_LVUP::CopyFrom(const S_EATITEM_LVUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_EATITEM_LVUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_EATITEM_LVUP::IsInitialized() const {
  return true;
}

void S_EATITEM_LVUP::InternalSwap(S_EATITEM_LVUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_EATITEM_LVUP, _impl_.curlv_)
      + sizeof(S_EATITEM_LVUP::_impl_.curlv_)
      - PROTOBUF_FIELD_OFFSET(S_EATITEM_LVUP, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_EATITEM_LVUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[79]);
}

// ===================================================================

class C_EATITEM_LVUP::_Internal {
 public:
};

C_EATITEM_LVUP::C_EATITEM_LVUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_EATITEM_LVUP)
}
C_EATITEM_LVUP::C_EATITEM_LVUP(const C_EATITEM_LVUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_EATITEM_LVUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.curlv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.curlv_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.curlv_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_EATITEM_LVUP)
}

inline void C_EATITEM_LVUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.curlv_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_EATITEM_LVUP::~C_EATITEM_LVUP() {
  // @@protoc_insertion_point(destructor:Protocol.C_EATITEM_LVUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_EATITEM_LVUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_EATITEM_LVUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_EATITEM_LVUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_EATITEM_LVUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.curlv_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.curlv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_EATITEM_LVUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 curLV = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.curlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_EATITEM_LVUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_EATITEM_LVUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int64 curLV = 2;
  if (this->_internal_curlv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_curlv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_EATITEM_LVUP)
  return target;
}

size_t C_EATITEM_LVUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_EATITEM_LVUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // int64 curLV = 2;
  if (this->_internal_curlv() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_curlv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_EATITEM_LVUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_EATITEM_LVUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_EATITEM_LVUP::GetClassData() const { return &_class_data_; }


void C_EATITEM_LVUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_EATITEM_LVUP*>(&to_msg);
  auto& from = static_cast<const C_EATITEM_LVUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_EATITEM_LVUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_curlv() != 0) {
    _this->_internal_set_curlv(from._internal_curlv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_EATITEM_LVUP::CopyFrom(const C_EATITEM_LVUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_EATITEM_LVUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_EATITEM_LVUP::IsInitialized() const {
  return true;
}

void C_EATITEM_LVUP::InternalSwap(C_EATITEM_LVUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_EATITEM_LVUP, _impl_.curlv_)
      + sizeof(C_EATITEM_LVUP::_impl_.curlv_)
      - PROTOBUF_FIELD_OFFSET(C_EATITEM_LVUP, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_EATITEM_LVUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[80]);
}

// ===================================================================

class S_EATITEM_DMGUP::_Internal {
 public:
};

S_EATITEM_DMGUP::S_EATITEM_DMGUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_EATITEM_DMGUP)
}
S_EATITEM_DMGUP::S_EATITEM_DMGUP(const S_EATITEM_DMGUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_EATITEM_DMGUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.attackdmg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attackdmg_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attackdmg_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_EATITEM_DMGUP)
}

inline void S_EATITEM_DMGUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.attackdmg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_EATITEM_DMGUP::~S_EATITEM_DMGUP() {
  // @@protoc_insertion_point(destructor:Protocol.S_EATITEM_DMGUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_EATITEM_DMGUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_EATITEM_DMGUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_EATITEM_DMGUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_EATITEM_DMGUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attackdmg_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attackdmg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_EATITEM_DMGUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float attackDmg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.attackdmg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_EATITEM_DMGUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_EATITEM_DMGUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float attackDmg = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = this->_internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_attackdmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_EATITEM_DMGUP)
  return target;
}

size_t S_EATITEM_DMGUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_EATITEM_DMGUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float attackDmg = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = this->_internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_EATITEM_DMGUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_EATITEM_DMGUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_EATITEM_DMGUP::GetClassData() const { return &_class_data_; }


void S_EATITEM_DMGUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_EATITEM_DMGUP*>(&to_msg);
  auto& from = static_cast<const S_EATITEM_DMGUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_EATITEM_DMGUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = from._internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    _this->_internal_set_attackdmg(from._internal_attackdmg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_EATITEM_DMGUP::CopyFrom(const S_EATITEM_DMGUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_EATITEM_DMGUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_EATITEM_DMGUP::IsInitialized() const {
  return true;
}

void S_EATITEM_DMGUP::InternalSwap(S_EATITEM_DMGUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_EATITEM_DMGUP, _impl_.attackdmg_)
      + sizeof(S_EATITEM_DMGUP::_impl_.attackdmg_)
      - PROTOBUF_FIELD_OFFSET(S_EATITEM_DMGUP, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_EATITEM_DMGUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[81]);
}

// ===================================================================

class C_EATITEM_DMGUP::_Internal {
 public:
};

C_EATITEM_DMGUP::C_EATITEM_DMGUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_EATITEM_DMGUP)
}
C_EATITEM_DMGUP::C_EATITEM_DMGUP(const C_EATITEM_DMGUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_EATITEM_DMGUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.attackdmg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attackdmg_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attackdmg_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_EATITEM_DMGUP)
}

inline void C_EATITEM_DMGUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.attackdmg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_EATITEM_DMGUP::~C_EATITEM_DMGUP() {
  // @@protoc_insertion_point(destructor:Protocol.C_EATITEM_DMGUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_EATITEM_DMGUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_EATITEM_DMGUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_EATITEM_DMGUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_EATITEM_DMGUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attackdmg_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attackdmg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_EATITEM_DMGUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float attackDmg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.attackdmg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_EATITEM_DMGUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_EATITEM_DMGUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float attackDmg = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = this->_internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_attackdmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_EATITEM_DMGUP)
  return target;
}

size_t C_EATITEM_DMGUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_EATITEM_DMGUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float attackDmg = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = this->_internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_EATITEM_DMGUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_EATITEM_DMGUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_EATITEM_DMGUP::GetClassData() const { return &_class_data_; }


void C_EATITEM_DMGUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_EATITEM_DMGUP*>(&to_msg);
  auto& from = static_cast<const C_EATITEM_DMGUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_EATITEM_DMGUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackdmg = from._internal_attackdmg();
  uint32_t raw_attackdmg;
  memcpy(&raw_attackdmg, &tmp_attackdmg, sizeof(tmp_attackdmg));
  if (raw_attackdmg != 0) {
    _this->_internal_set_attackdmg(from._internal_attackdmg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_EATITEM_DMGUP::CopyFrom(const C_EATITEM_DMGUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_EATITEM_DMGUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_EATITEM_DMGUP::IsInitialized() const {
  return true;
}

void C_EATITEM_DMGUP::InternalSwap(C_EATITEM_DMGUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_EATITEM_DMGUP, _impl_.attackdmg_)
      + sizeof(C_EATITEM_DMGUP::_impl_.attackdmg_)
      - PROTOBUF_FIELD_OFFSET(C_EATITEM_DMGUP, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_EATITEM_DMGUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[82]);
}

// ===================================================================

class S_EATITEM_HEALHP::_Internal {
 public:
};

S_EATITEM_HEALHP::S_EATITEM_HEALHP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_EATITEM_HEALHP)
}
S_EATITEM_HEALHP::S_EATITEM_HEALHP(const S_EATITEM_HEALHP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_EATITEM_HEALHP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.curhp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.curhp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.curhp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_EATITEM_HEALHP)
}

inline void S_EATITEM_HEALHP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.curhp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_EATITEM_HEALHP::~S_EATITEM_HEALHP() {
  // @@protoc_insertion_point(destructor:Protocol.S_EATITEM_HEALHP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_EATITEM_HEALHP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_EATITEM_HEALHP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_EATITEM_HEALHP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_EATITEM_HEALHP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.curhp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.curhp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_EATITEM_HEALHP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float curHP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.curhp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_EATITEM_HEALHP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_EATITEM_HEALHP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float curHP = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curhp = this->_internal_curhp();
  uint32_t raw_curhp;
  memcpy(&raw_curhp, &tmp_curhp, sizeof(tmp_curhp));
  if (raw_curhp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_curhp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_EATITEM_HEALHP)
  return target;
}

size_t S_EATITEM_HEALHP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_EATITEM_HEALHP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float curHP = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curhp = this->_internal_curhp();
  uint32_t raw_curhp;
  memcpy(&raw_curhp, &tmp_curhp, sizeof(tmp_curhp));
  if (raw_curhp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_EATITEM_HEALHP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_EATITEM_HEALHP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_EATITEM_HEALHP::GetClassData() const { return &_class_data_; }


void S_EATITEM_HEALHP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_EATITEM_HEALHP*>(&to_msg);
  auto& from = static_cast<const S_EATITEM_HEALHP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_EATITEM_HEALHP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curhp = from._internal_curhp();
  uint32_t raw_curhp;
  memcpy(&raw_curhp, &tmp_curhp, sizeof(tmp_curhp));
  if (raw_curhp != 0) {
    _this->_internal_set_curhp(from._internal_curhp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_EATITEM_HEALHP::CopyFrom(const S_EATITEM_HEALHP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_EATITEM_HEALHP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_EATITEM_HEALHP::IsInitialized() const {
  return true;
}

void S_EATITEM_HEALHP::InternalSwap(S_EATITEM_HEALHP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_EATITEM_HEALHP, _impl_.curhp_)
      + sizeof(S_EATITEM_HEALHP::_impl_.curhp_)
      - PROTOBUF_FIELD_OFFSET(S_EATITEM_HEALHP, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_EATITEM_HEALHP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[83]);
}

// ===================================================================

class C_EATITEM_HEALHP::_Internal {
 public:
};

C_EATITEM_HEALHP::C_EATITEM_HEALHP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_EATITEM_HEALHP)
}
C_EATITEM_HEALHP::C_EATITEM_HEALHP(const C_EATITEM_HEALHP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_EATITEM_HEALHP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.curhp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.curhp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.curhp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_EATITEM_HEALHP)
}

inline void C_EATITEM_HEALHP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.curhp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_EATITEM_HEALHP::~C_EATITEM_HEALHP() {
  // @@protoc_insertion_point(destructor:Protocol.C_EATITEM_HEALHP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_EATITEM_HEALHP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_EATITEM_HEALHP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_EATITEM_HEALHP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_EATITEM_HEALHP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.curhp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.curhp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_EATITEM_HEALHP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float curHP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.curhp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_EATITEM_HEALHP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_EATITEM_HEALHP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float curHP = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curhp = this->_internal_curhp();
  uint32_t raw_curhp;
  memcpy(&raw_curhp, &tmp_curhp, sizeof(tmp_curhp));
  if (raw_curhp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_curhp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_EATITEM_HEALHP)
  return target;
}

size_t C_EATITEM_HEALHP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_EATITEM_HEALHP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float curHP = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curhp = this->_internal_curhp();
  uint32_t raw_curhp;
  memcpy(&raw_curhp, &tmp_curhp, sizeof(tmp_curhp));
  if (raw_curhp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_EATITEM_HEALHP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_EATITEM_HEALHP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_EATITEM_HEALHP::GetClassData() const { return &_class_data_; }


void C_EATITEM_HEALHP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_EATITEM_HEALHP*>(&to_msg);
  auto& from = static_cast<const C_EATITEM_HEALHP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_EATITEM_HEALHP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curhp = from._internal_curhp();
  uint32_t raw_curhp;
  memcpy(&raw_curhp, &tmp_curhp, sizeof(tmp_curhp));
  if (raw_curhp != 0) {
    _this->_internal_set_curhp(from._internal_curhp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_EATITEM_HEALHP::CopyFrom(const C_EATITEM_HEALHP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_EATITEM_HEALHP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_EATITEM_HEALHP::IsInitialized() const {
  return true;
}

void C_EATITEM_HEALHP::InternalSwap(C_EATITEM_HEALHP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_EATITEM_HEALHP, _impl_.curhp_)
      + sizeof(C_EATITEM_HEALHP::_impl_.curhp_)
      - PROTOBUF_FIELD_OFFSET(C_EATITEM_HEALHP, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_EATITEM_HEALHP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[84]);
}

// ===================================================================

class S_SET_MAGNETICFIELD::_Internal {
 public:
};

S_SET_MAGNETICFIELD::S_SET_MAGNETICFIELD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SET_MAGNETICFIELD)
}
S_SET_MAGNETICFIELD::S_SET_MAGNETICFIELD(const S_SET_MAGNETICFIELD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SET_MAGNETICFIELD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SET_MAGNETICFIELD)
}

inline void S_SET_MAGNETICFIELD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){0}
    , decltype(_impl_.g_){0}
    , decltype(_impl_.b_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SET_MAGNETICFIELD::~S_SET_MAGNETICFIELD() {
  // @@protoc_insertion_point(destructor:Protocol.S_SET_MAGNETICFIELD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SET_MAGNETICFIELD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_SET_MAGNETICFIELD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SET_MAGNETICFIELD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SET_MAGNETICFIELD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SET_MAGNETICFIELD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SET_MAGNETICFIELD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SET_MAGNETICFIELD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // float g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // float b = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // float a = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  // float radius = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_radius(), target);
  }

  // float time = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SET_MAGNETICFIELD)
  return target;
}

size_t S_SET_MAGNETICFIELD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SET_MAGNETICFIELD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 4;
  }

  // float g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    total_size += 1 + 4;
  }

  // float a = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    total_size += 1 + 4;
  }

  // float radius = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float time = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SET_MAGNETICFIELD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SET_MAGNETICFIELD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SET_MAGNETICFIELD::GetClassData() const { return &_class_data_; }


void S_SET_MAGNETICFIELD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SET_MAGNETICFIELD*>(&to_msg);
  auto& from = static_cast<const S_SET_MAGNETICFIELD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SET_MAGNETICFIELD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = from._internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = from._internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    _this->_internal_set_g(from._internal_g());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = from._internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = from._internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = from._internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SET_MAGNETICFIELD::CopyFrom(const S_SET_MAGNETICFIELD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SET_MAGNETICFIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SET_MAGNETICFIELD::IsInitialized() const {
  return true;
}

void S_SET_MAGNETICFIELD::InternalSwap(S_SET_MAGNETICFIELD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SET_MAGNETICFIELD, _impl_.time_)
      + sizeof(S_SET_MAGNETICFIELD::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(S_SET_MAGNETICFIELD, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SET_MAGNETICFIELD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[85]);
}

// ===================================================================

class C_SET_MAGNETICFIELD::_Internal {
 public:
};

C_SET_MAGNETICFIELD::C_SET_MAGNETICFIELD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SET_MAGNETICFIELD)
}
C_SET_MAGNETICFIELD::C_SET_MAGNETICFIELD(const C_SET_MAGNETICFIELD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SET_MAGNETICFIELD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SET_MAGNETICFIELD)
}

inline void C_SET_MAGNETICFIELD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){0}
    , decltype(_impl_.g_){0}
    , decltype(_impl_.b_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SET_MAGNETICFIELD::~C_SET_MAGNETICFIELD() {
  // @@protoc_insertion_point(destructor:Protocol.C_SET_MAGNETICFIELD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SET_MAGNETICFIELD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_SET_MAGNETICFIELD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SET_MAGNETICFIELD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SET_MAGNETICFIELD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SET_MAGNETICFIELD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SET_MAGNETICFIELD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SET_MAGNETICFIELD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // float g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // float b = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // float a = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  // float radius = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_radius(), target);
  }

  // float time = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SET_MAGNETICFIELD)
  return target;
}

size_t C_SET_MAGNETICFIELD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SET_MAGNETICFIELD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 4;
  }

  // float g = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    total_size += 1 + 4;
  }

  // float a = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    total_size += 1 + 4;
  }

  // float radius = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float time = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SET_MAGNETICFIELD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SET_MAGNETICFIELD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SET_MAGNETICFIELD::GetClassData() const { return &_class_data_; }


void C_SET_MAGNETICFIELD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SET_MAGNETICFIELD*>(&to_msg);
  auto& from = static_cast<const C_SET_MAGNETICFIELD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SET_MAGNETICFIELD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = from._internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = from._internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    _this->_internal_set_g(from._internal_g());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = from._internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = from._internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = from._internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SET_MAGNETICFIELD::CopyFrom(const C_SET_MAGNETICFIELD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SET_MAGNETICFIELD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SET_MAGNETICFIELD::IsInitialized() const {
  return true;
}

void C_SET_MAGNETICFIELD::InternalSwap(C_SET_MAGNETICFIELD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SET_MAGNETICFIELD, _impl_.time_)
      + sizeof(C_SET_MAGNETICFIELD::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(C_SET_MAGNETICFIELD, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SET_MAGNETICFIELD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[86]);
}

// ===================================================================

class S_WORLD_LVUP::_Internal {
 public:
};

S_WORLD_LVUP::S_WORLD_LVUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_WORLD_LVUP)
}
S_WORLD_LVUP::S_WORLD_LVUP(const S_WORLD_LVUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_WORLD_LVUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.worldlevel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.worldlevel_ = from._impl_.worldlevel_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_WORLD_LVUP)
}

inline void S_WORLD_LVUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.worldlevel_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_WORLD_LVUP::~S_WORLD_LVUP() {
  // @@protoc_insertion_point(destructor:Protocol.S_WORLD_LVUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_WORLD_LVUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_WORLD_LVUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_WORLD_LVUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_WORLD_LVUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worldlevel_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_WORLD_LVUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 worldLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.worldlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_WORLD_LVUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_WORLD_LVUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 worldLevel = 1;
  if (this->_internal_worldlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_WORLD_LVUP)
  return target;
}

size_t S_WORLD_LVUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_WORLD_LVUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 worldLevel = 1;
  if (this->_internal_worldlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worldlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_WORLD_LVUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_WORLD_LVUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_WORLD_LVUP::GetClassData() const { return &_class_data_; }


void S_WORLD_LVUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_WORLD_LVUP*>(&to_msg);
  auto& from = static_cast<const S_WORLD_LVUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_WORLD_LVUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_worldlevel() != 0) {
    _this->_internal_set_worldlevel(from._internal_worldlevel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_WORLD_LVUP::CopyFrom(const S_WORLD_LVUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_WORLD_LVUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_WORLD_LVUP::IsInitialized() const {
  return true;
}

void S_WORLD_LVUP::InternalSwap(S_WORLD_LVUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.worldlevel_, other->_impl_.worldlevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_WORLD_LVUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[87]);
}

// ===================================================================

class C_WORLD_LVUP::_Internal {
 public:
};

C_WORLD_LVUP::C_WORLD_LVUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_WORLD_LVUP)
}
C_WORLD_LVUP::C_WORLD_LVUP(const C_WORLD_LVUP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_WORLD_LVUP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.worldlevel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.worldlevel_ = from._impl_.worldlevel_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_WORLD_LVUP)
}

inline void C_WORLD_LVUP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.worldlevel_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_WORLD_LVUP::~C_WORLD_LVUP() {
  // @@protoc_insertion_point(destructor:Protocol.C_WORLD_LVUP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_WORLD_LVUP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_WORLD_LVUP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_WORLD_LVUP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_WORLD_LVUP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worldlevel_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_WORLD_LVUP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 worldLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.worldlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_WORLD_LVUP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_WORLD_LVUP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 worldLevel = 1;
  if (this->_internal_worldlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_worldlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_WORLD_LVUP)
  return target;
}

size_t C_WORLD_LVUP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_WORLD_LVUP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 worldLevel = 1;
  if (this->_internal_worldlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worldlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_WORLD_LVUP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_WORLD_LVUP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_WORLD_LVUP::GetClassData() const { return &_class_data_; }


void C_WORLD_LVUP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_WORLD_LVUP*>(&to_msg);
  auto& from = static_cast<const C_WORLD_LVUP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_WORLD_LVUP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_worldlevel() != 0) {
    _this->_internal_set_worldlevel(from._internal_worldlevel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_WORLD_LVUP::CopyFrom(const C_WORLD_LVUP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_WORLD_LVUP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_WORLD_LVUP::IsInitialized() const {
  return true;
}

void C_WORLD_LVUP::InternalSwap(C_WORLD_LVUP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.worldlevel_, other->_impl_.worldlevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_WORLD_LVUP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[88]);
}

// ===================================================================

class S_GAMERESULT::_Internal {
 public:
};

S_GAMERESULT::S_GAMERESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_GAMERESULT)
}
S_GAMERESULT::S_GAMERESULT(const S_GAMERESULT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_GAMERESULT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_GAMERESULT)
}

inline void S_GAMERESULT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_GAMERESULT::~S_GAMERESULT() {
  // @@protoc_insertion_point(destructor:Protocol.S_GAMERESULT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_GAMERESULT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_GAMERESULT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_GAMERESULT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_GAMERESULT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_GAMERESULT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_GAMERESULT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_GAMERESULT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_GAMERESULT)
  return target;
}

size_t S_GAMERESULT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_GAMERESULT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_GAMERESULT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_GAMERESULT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_GAMERESULT::GetClassData() const { return &_class_data_; }


void S_GAMERESULT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_GAMERESULT*>(&to_msg);
  auto& from = static_cast<const S_GAMERESULT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_GAMERESULT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_GAMERESULT::CopyFrom(const S_GAMERESULT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_GAMERESULT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_GAMERESULT::IsInitialized() const {
  return true;
}

void S_GAMERESULT::InternalSwap(S_GAMERESULT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_GAMERESULT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[89]);
}

// ===================================================================

class C_GAMERESULT::_Internal {
 public:
};

C_GAMERESULT::C_GAMERESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_GAMERESULT)
}
C_GAMERESULT::C_GAMERESULT(const C_GAMERESULT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_GAMERESULT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_GAMERESULT)
}

inline void C_GAMERESULT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_GAMERESULT::~C_GAMERESULT() {
  // @@protoc_insertion_point(destructor:Protocol.C_GAMERESULT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_GAMERESULT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_GAMERESULT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_GAMERESULT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_GAMERESULT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_GAMERESULT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_GAMERESULT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_GAMERESULT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_GAMERESULT)
  return target;
}

size_t C_GAMERESULT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_GAMERESULT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_GAMERESULT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_GAMERESULT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_GAMERESULT::GetClassData() const { return &_class_data_; }


void C_GAMERESULT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_GAMERESULT*>(&to_msg);
  auto& from = static_cast<const C_GAMERESULT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_GAMERESULT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_GAMERESULT::CopyFrom(const C_GAMERESULT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_GAMERESULT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_GAMERESULT::IsInitialized() const {
  return true;
}

void C_GAMERESULT::InternalSwap(C_GAMERESULT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_GAMERESULT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[90]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::C_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYERSPAWNPOINT*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYERSPAWNPOINT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYERSPAWNPOINT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYERCOUNT*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYERCOUNT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYERCOUNT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYERCOUNT*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYERCOUNT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYERCOUNT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_GAMESTART*
Arena::CreateMaybeMessage< ::Protocol::C_GAMESTART >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_GAMESTART >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_GAMESTART*
Arena::CreateMaybeMessage< ::Protocol::S_GAMESTART >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_GAMESTART >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTER_GAME*
Arena::CreateMaybeMessage< ::Protocol::C_ENTER_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_ENTER_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LEAVE_GAME*
Arena::CreateMaybeMessage< ::Protocol::C_LEAVE_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LEAVE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LEAVE_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_LEAVE_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LEAVE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_SPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DESPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_DESPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MOVE*
Arena::CreateMaybeMessage< ::Protocol::C_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MOVE*
Arena::CreateMaybeMessage< ::Protocol::S_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHAT*
Arena::CreateMaybeMessage< ::Protocol::C_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHAT*
Arena::CreateMaybeMessage< ::Protocol::S_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_FIRE*
Arena::CreateMaybeMessage< ::Protocol::C_FIRE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_FIRE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FIRE*
Arena::CreateMaybeMessage< ::Protocol::S_FIRE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FIRE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_HIT*
Arena::CreateMaybeMessage< ::Protocol::C_HIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_HIT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_HIT*
Arena::CreateMaybeMessage< ::Protocol::S_HIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_HIT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_EXPUP*
Arena::CreateMaybeMessage< ::Protocol::S_EXPUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_EXPUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_EXPUP*
Arena::CreateMaybeMessage< ::Protocol::C_EXPUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_EXPUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LVUP*
Arena::CreateMaybeMessage< ::Protocol::S_LVUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LVUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LVUP*
Arena::CreateMaybeMessage< ::Protocol::C_LVUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LVUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AISPAWN_RANDOM*
Arena::CreateMaybeMessage< ::Protocol::C_AISPAWN_RANDOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AISPAWN_RANDOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AISPAWN_RANDOM*
Arena::CreateMaybeMessage< ::Protocol::S_AISPAWN_RANDOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AISPAWN_RANDOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AISPAWN_PATROL*
Arena::CreateMaybeMessage< ::Protocol::C_AISPAWN_PATROL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AISPAWN_PATROL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AISPAWN_PATROL*
Arena::CreateMaybeMessage< ::Protocol::S_AISPAWN_PATROL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AISPAWN_PATROL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AISPAWN_BOSS*
Arena::CreateMaybeMessage< ::Protocol::C_AISPAWN_BOSS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AISPAWN_BOSS >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AISPAWN_BOSS*
Arena::CreateMaybeMessage< ::Protocol::S_AISPAWN_BOSS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AISPAWN_BOSS >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AIMOVE*
Arena::CreateMaybeMessage< ::Protocol::S_AIMOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AIMOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AIMOVE*
Arena::CreateMaybeMessage< ::Protocol::C_AIMOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AIMOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AIMOVESTOP*
Arena::CreateMaybeMessage< ::Protocol::S_AIMOVESTOP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AIMOVESTOP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AIMOVESTOP*
Arena::CreateMaybeMessage< ::Protocol::C_AIMOVESTOP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AIMOVESTOP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AIATTACK*
Arena::CreateMaybeMessage< ::Protocol::S_AIATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AIATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AIATTACK*
Arena::CreateMaybeMessage< ::Protocol::C_AIATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AIATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AIATTACK_BOSS2*
Arena::CreateMaybeMessage< ::Protocol::S_AIATTACK_BOSS2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AIATTACK_BOSS2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AIATTACK_BOSS2*
Arena::CreateMaybeMessage< ::Protocol::C_AIATTACK_BOSS2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AIATTACK_BOSS2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AIROTATE*
Arena::CreateMaybeMessage< ::Protocol::S_AIROTATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AIROTATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AIROTATE*
Arena::CreateMaybeMessage< ::Protocol::C_AIROTATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AIROTATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AIHIT*
Arena::CreateMaybeMessage< ::Protocol::S_AIHIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AIHIT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AIHIT*
Arena::CreateMaybeMessage< ::Protocol::C_AIHIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AIHIT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DAMAGED*
Arena::CreateMaybeMessage< ::Protocol::S_DAMAGED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DAMAGED >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DAMAGED*
Arena::CreateMaybeMessage< ::Protocol::C_DAMAGED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DAMAGED >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AIDAMAGED*
Arena::CreateMaybeMessage< ::Protocol::S_AIDAMAGED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AIDAMAGED >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AIDAMAGED*
Arena::CreateMaybeMessage< ::Protocol::C_AIDAMAGED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AIDAMAGED >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AIDEAD*
Arena::CreateMaybeMessage< ::Protocol::S_AIDEAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AIDEAD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AIDEAD*
Arena::CreateMaybeMessage< ::Protocol::C_AIDEAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AIDEAD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYERDEAD*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYERDEAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYERDEAD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYERDEAD*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYERDEAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYERDEAD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AIPROJSPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_AIPROJSPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AIPROJSPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AIPROJSPAWN*
Arena::CreateMaybeMessage< ::Protocol::C_AIPROJSPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AIPROJSPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_AI_KNOCKS_BACK*
Arena::CreateMaybeMessage< ::Protocol::S_AI_KNOCKS_BACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_AI_KNOCKS_BACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_AI_KNOCKS_BACK*
Arena::CreateMaybeMessage< ::Protocol::C_AI_KNOCKS_BACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_AI_KNOCKS_BACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYERSKILL_BOMB*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYERSKILL_BOMB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYERSKILL_BOMB >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYERSKILL_BOMB*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYERSKILL_BOMB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYERSKILL_BOMB >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYERSKILL_GRANADE*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYERSKILL_GRANADE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYERSKILL_GRANADE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYERSKILL_GRANADE*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYERSKILL_GRANADE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYERSKILL_GRANADE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYERSKILL_CHEMICAL*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYERSKILL_CHEMICAL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYERSKILL_CHEMICAL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYERSKILL_CHEMICAL*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYERSKILL_CHEMICAL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYERSKILL_CHEMICAL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYERSKILL_GUARD*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYERSKILL_GUARD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYERSKILL_GUARD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYERSKILL_GUARD*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYERSKILL_GUARD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYERSKILL_GUARD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYERSKILL_HEAL*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYERSKILL_HEAL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYERSKILL_HEAL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYERSKILL_HEAL*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYERSKILL_HEAL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYERSKILL_HEAL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYERHEAL*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYERHEAL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYERHEAL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYERHEAL*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYERHEAL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYERHEAL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MAKEDRONE*
Arena::CreateMaybeMessage< ::Protocol::S_MAKEDRONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MAKEDRONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MAKEDRONE*
Arena::CreateMaybeMessage< ::Protocol::C_MAKEDRONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MAKEDRONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MOVEDRONE*
Arena::CreateMaybeMessage< ::Protocol::S_MOVEDRONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MOVEDRONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MOVEDRONE*
Arena::CreateMaybeMessage< ::Protocol::C_MOVEDRONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MOVEDRONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SEARCHDRONE*
Arena::CreateMaybeMessage< ::Protocol::S_SEARCHDRONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SEARCHDRONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SEARCHDRONE*
Arena::CreateMaybeMessage< ::Protocol::C_SEARCHDRONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SEARCHDRONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_RETURNDRONE*
Arena::CreateMaybeMessage< ::Protocol::S_RETURNDRONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_RETURNDRONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_RETURNDRONE*
Arena::CreateMaybeMessage< ::Protocol::C_RETURNDRONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_RETURNDRONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ATTACKDRONE*
Arena::CreateMaybeMessage< ::Protocol::S_ATTACKDRONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ATTACKDRONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ATTACKDRONE*
Arena::CreateMaybeMessage< ::Protocol::C_ATTACKDRONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ATTACKDRONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_EATITEM_MAXHPUP*
Arena::CreateMaybeMessage< ::Protocol::S_EATITEM_MAXHPUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_EATITEM_MAXHPUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_EATITEM_MAXHPUP*
Arena::CreateMaybeMessage< ::Protocol::C_EATITEM_MAXHPUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_EATITEM_MAXHPUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_EATITEM_LVUP*
Arena::CreateMaybeMessage< ::Protocol::S_EATITEM_LVUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_EATITEM_LVUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_EATITEM_LVUP*
Arena::CreateMaybeMessage< ::Protocol::C_EATITEM_LVUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_EATITEM_LVUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_EATITEM_DMGUP*
Arena::CreateMaybeMessage< ::Protocol::S_EATITEM_DMGUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_EATITEM_DMGUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_EATITEM_DMGUP*
Arena::CreateMaybeMessage< ::Protocol::C_EATITEM_DMGUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_EATITEM_DMGUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_EATITEM_HEALHP*
Arena::CreateMaybeMessage< ::Protocol::S_EATITEM_HEALHP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_EATITEM_HEALHP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_EATITEM_HEALHP*
Arena::CreateMaybeMessage< ::Protocol::C_EATITEM_HEALHP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_EATITEM_HEALHP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SET_MAGNETICFIELD*
Arena::CreateMaybeMessage< ::Protocol::S_SET_MAGNETICFIELD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SET_MAGNETICFIELD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SET_MAGNETICFIELD*
Arena::CreateMaybeMessage< ::Protocol::C_SET_MAGNETICFIELD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SET_MAGNETICFIELD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_WORLD_LVUP*
Arena::CreateMaybeMessage< ::Protocol::S_WORLD_LVUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_WORLD_LVUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_WORLD_LVUP*
Arena::CreateMaybeMessage< ::Protocol::C_WORLD_LVUP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_WORLD_LVUP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_GAMERESULT*
Arena::CreateMaybeMessage< ::Protocol::S_GAMERESULT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_GAMERESULT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_GAMERESULT*
Arena::CreateMaybeMessage< ::Protocol::C_GAMERESULT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_GAMERESULT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
